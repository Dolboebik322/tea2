#!/usr/bin/env python3
"""
CVE-2024-3566 (BatBadBut) - Демонстрационные примеры для Python
ВНИМАНИЕ: Этот код предназначен только для образовательных целей!
"""

import subprocess
import os
import shlex
import re
from pathlib import Path

def print_section(title):
    """Печатает заголовок раздела"""
    print(f"\n{'='*50}")
    print(f"{title}")
    print('='*50)

def vulnerable_subprocess_run(user_input):
    """Пример уязвимого использования subprocess.run()"""
    print("1. УЯЗВИМЫЙ КОД - subprocess.run() без .exe:")
    print(f"   Выполнение: subprocess.run(['git', 'clone', '{user_input}'])")
    
    try:
        result = subprocess.run(['git', 'clone', user_input], 
                              capture_output=True, text=True, timeout=10)
        print(f"   Код возврата: {result.returncode}")
        if result.stdout:
            print(f"   STDOUT: {result.stdout[:200]}...")
        if result.stderr:
            print(f"   STDERR: {result.stderr[:200]}...")
    except subprocess.TimeoutExpired:
        print("   Таймаут выполнения")
    except Exception as e:
        print(f"   Ошибка: {e}")
    print()

def safe_subprocess_run(user_input):
    """Пример безопасного использования с .exe"""
    print("2. БЕЗОПАСНЫЙ КОД - явное указание .exe:")
    print(f"   Выполнение: subprocess.run(['git.exe', 'clone', '{user_input}'])")
    
    try:
        result = subprocess.run(['git.exe', 'clone', user_input], 
                              capture_output=True, text=True, timeout=10)
        print(f"   Код возврата: {result.returncode}")
        if result.stdout:
            print(f"   STDOUT: {result.stdout[:200]}...")
        if result.stderr:
            print(f"   STDERR: {result.stderr[:200]}...")
    except subprocess.TimeoutExpired:
        print("   Таймаут выполнения")
    except Exception as e:
        print(f"   Ошибка: {e}")
    print()

def create_malicious_bat():
    """Создает демонстрационный вредоносный batch-файл"""
    bat_content = """@echo off
echo [DEMO] Выполняется вредоносный git.bat
echo [DEMO] Аргументы: %*
echo [DEMO] ВНИМАНИЕ: Это демонстрация уязвимости!

REM В реальной атаке здесь был бы вредоносный код
echo [DEMO] Здесь мог бы выполниться произвольный код...

REM Попытка выполнить настоящий git (если он есть)
where git.exe >nul 2>&1
if %errorlevel% == 0 (
    echo [DEMO] Перенаправление на настоящий git.exe
    git.exe %*
) else (
    echo [DEMO] git.exe не найден
)
"""
    
    bat_path = Path(__file__).parent / 'git.bat'
    with open(bat_path, 'w', encoding='cp1251') as f:
        f.write(bat_content)
    
    print(f"3. Создан демонстрационный файл: {bat_path}")
    print("   Этот файл показывает, как может работать атака\n")
    
    return str(bat_path)

def validate_input(user_input):
    """Валидация пользовательского ввода"""
    print("4. ВАЛИДАЦИЯ ВХОДНЫХ ДАННЫХ:")
    print(f"   Проверка ввода: \"{user_input}\"")
    
    # Проверка на подозрительные символы
    dangerous_chars = re.compile(r'[&|;`$(){}\[\]<>]')
    if dangerous_chars.search(user_input):
        print("   ❌ ОПАСНЫЙ ВВОД ОБНАРУЖЕН!")
        print("   Найдены подозрительные символы, выполнение заблокировано\n")
        return False
    
    # Проверка на допустимые символы для URL репозитория
    valid_repo_url = re.compile(r'^https?://[a-zA-Z0-9\-_./:]+\.git$')
    if not valid_repo_url.match(user_input):
        print("   ❌ НЕДОПУСТИМЫЙ URL РЕПОЗИТОРИЯ!")
        print("   Ввод не соответствует формату URL git-репозитория\n")
        return False
    
    print("   ✅ Ввод прошел валидацию\n")
    return True

def safe_subprocess_with_escaping(user_input):
    """Безопасное выполнение с экранированием"""
    print("5. БЕЗОПАСНЫЙ КОД - с экранированием:")
    
    # Используем shlex для безопасного экранирования
    escaped_input = shlex.quote(user_input)
    print(f"   Исходный ввод: {user_input}")
    print(f"   Экранированный: {escaped_input}")
    print(f"   Выполнение: subprocess.run(['git.exe', 'clone', {escaped_input}])")
    
    try:
        result = subprocess.run(['git.exe', 'clone', escaped_input], 
                              capture_output=True, text=True, timeout=10)
        print(f"   Код возврата: {result.returncode}")
        if result.stdout:
            print(f"   STDOUT: {result.stdout[:200]}...")
        if result.stderr:
            print(f"   STDERR: {result.stderr[:200]}...")
    except subprocess.TimeoutExpired:
        print("   Таймаут выполнения")
    except Exception as e:
        print(f"   Ошибка: {e}")
    print()

def safe_subprocess_with_absolute_path(user_input):
    """Безопасное выполнение с абсолютным путем"""
    print("6. БЕЗОПАСНЫЙ КОД - с абсолютным путем:")
    
    # Попытка найти git.exe в стандартных местах
    possible_paths = [
        r"C:\Program Files\Git\bin\git.exe",
        r"C:\Program Files (x86)\Git\bin\git.exe",
        r"C:\Git\bin\git.exe"
    ]
    
    git_path = None
    for path in possible_paths:
        if os.path.exists(path):
            git_path = path
            break
    
    if not git_path:
        print("   git.exe не найден в стандартных местах")
        return
    
    print(f"   Используется абсолютный путь: {git_path}")
    print(f"   Выполнение: subprocess.run(['{git_path}', 'clone', '{user_input}'])")
    
    try:
        result = subprocess.run([git_path, 'clone', user_input], 
                              capture_output=True, text=True, timeout=10)
        print(f"   Код возврата: {result.returncode}")
        if result.stdout:
            print(f"   STDOUT: {result.stdout[:200]}...")
        if result.stderr:
            print(f"   STDERR: {result.stderr[:200]}...")
    except subprocess.TimeoutExpired:
        print("   Таймаут выполнения")
    except Exception as e:
        print(f"   Ошибка: {e}")
    print()

def demonstrate_shell_injection():
    """Демонстрация инъекции через shell=True"""
    print("7. ОСОБО ОПАСНЫЙ КОД - shell=True:")
    
    malicious_input = 'https://repo.git" && echo "INJECTED" && echo "'
    print(f"   Вредоносный ввод: {malicious_input}")
    print("   НИКОГДА не используйте shell=True с пользовательским вводом!")
    
    # Не выполняем реально, только показываем
    command = f"git clone {malicious_input}"
    print(f"   Команда была бы: {command}")
    print("   Результат: выполнение произвольных команд!\n")

def run_demo():
    """Главная функция демонстрации"""
    print_section("CVE-2024-3566 (BatBadBut) Демонстрация - Python")
    
    # Примеры входных данных
    normal_input = "https://github.com/user/repo.git"
    malicious_input = 'https://repo.git" && echo "INJECTED COMMAND" && echo "'
    
    print(f"Нормальный ввод: {normal_input}")
    print(f"Вредоносный ввод: {malicious_input}")
    
    # Создаем демонстрационный bat-файл
    bat_path = create_malicious_bat()
    
    # Добавляем текущую директорию в PATH для демонстрации
    current_dir = str(Path(__file__).parent)
    original_path = os.environ.get('PATH', '')
    os.environ['PATH'] = current_dir + os.pathsep + original_path
    
    print_section("ТЕСТИРОВАНИЕ С НОРМАЛЬНЫМ ВВОДОМ")
    
    # Тест валидации
    validate_input(normal_input)
    
    # Безопасные методы
    safe_subprocess_run(normal_input)
    safe_subprocess_with_escaping(normal_input)
    safe_subprocess_with_absolute_path(normal_input)
    
    print_section("ДЕМОНСТРАЦИЯ С ВРЕДОНОСНЫМ ВВОДОМ")
    
    # Тест валидации с вредоносным вводом
    is_valid = validate_input(malicious_input)
    
    if not is_valid:
        print("Валидация заблокировала выполнение вредоносного ввода.\n")
    
    # Демонстрация опасности shell=True
    demonstrate_shell_injection()
    
    print_section("ОЧИСТКА")
    
    # Восстанавливаем PATH
    os.environ['PATH'] = original_path
    
    # Удаляем демонстрационный файл
    try:
        os.unlink(bat_path)
        print("Демонстрационный git.bat удален\n")
    except Exception as e:
        print(f"Ошибка при удалении файла: {e}\n")
    
    print_section("РЕКОМЕНДАЦИИ ПО ЗАЩИТЕ")
    print("1. Всегда используйте .exe расширение для исполняемых файлов")
    print("2. НИКОГДА не используйте shell=True с пользовательским вводом")
    print("3. Валидируйте и экранируйте пользовательский ввод (shlex.quote)")
    print("4. Используйте абсолютные пути к исполняемым файлам")
    print("5. Применяйте принцип минимальных привилегий")
    print("6. Регулярно обновляйте Python и зависимости")
    print("7. Используйте subprocess.run() вместо os.system() или shell=True")
    
    print("\nДемонстрация завершена.")

if __name__ == "__main__":
    run_demo()