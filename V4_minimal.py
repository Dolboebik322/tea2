#!/usr/bin/env python3
"""
Football.fun Player Trader v4.2 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import requests
import json
import time
from dataclasses import dataclass
from typing import Dict, Optional

@dataclass
class MinimalConfig:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    api_base_url: str = "https://api.pro.football.fun"
    alchemy_rpc_url: str = "https://base-mainnet.g.alchemy.com/v2/CCDNKip23OyFJ7ssex2-O"
    coinbase_paymaster_url: str = "https://api.developer.coinbase.com/rpc/v1/base/Zvs2anqQIBcBNSP8ftgv2Ce0mQMyEtyI"
    entry_point_address: str = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    smart_wallet_address: str = "0x8f37a8015851976aB75E309100c2511abaBC68AD"
    usdc_address: str = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
    trade_contract: str = "0x9da1bb4e725acc0d96010b7ce2a7244cda446617"
    chain_id: str = "0x2105"

class MinimalFootballTrader:
    def __init__(self, bearer_token: str):
        self.config = MinimalConfig()
        self.bearer_token = bearer_token
        self.session = requests.Session()
        
        self.api_headers = {
            "accept": "*/*",
            "authorization": f"Bearer {bearer_token}",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        self.rpc_headers = {
            "accept": "*/*",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }

    def get_quote(self, player_id: int, shares: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"""
        print(f"üì§ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        payload = {
            "transactionType": "BUY",
            "inputType": "SHARES",
            "oPlayerIds": [player_id],
            "inputValues": [shares],
            "slippageBps": 500
        }
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/quote",
            headers=self.api_headers,
            json=payload
        )
        response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ UUID={data['uuid']}, Gold={data['totalMaxGoldToSpend']}")
        return data

    def get_signature(self, quote_uuid: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç API"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
        
        payload = {"quoteId": quote_uuid}
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/signature/buy",
            headers=self.api_headers,
            json=payload
        )
        response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ nonce={data['nonce']}, deadline={data['deadline']}")
        return data

    def build_simple_calldata(self, player_id: int, max_gold_wei: int, signature: str, nonce: int, deadline: int) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callData"""
        print("üîß –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π callData...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        calldata = "0x34fcd5be"  # executeBatch selector
        calldata += "0000000000000000000000000000000000000000000000000000000000000020"  # offset to array
        calldata += "0000000000000000000000000000000000000000000000000000000000000002"  # array length = 2
        calldata += "0000000000000000000000000000000000000000000000000000000000000040"  # offset to first call
        calldata += "0000000000000000000000000000000000000000000000000000000000000120"  # offset to second call
        
        # First call: approve USDC
        calldata += f"000000000000000000000000{self.config.usdc_address[2:].lower()}"  # target
        calldata += "0000000000000000000000000000000000000000000000000000000000000000"  # value = 0
        calldata += "0000000000000000000000000000000000000000000000000000000000000060"  # data offset
        calldata += "0000000000000000000000000000000000000000000000000000000000000044"  # data length
        calldata += "095ea7b3"  # approve selector
        calldata += f"000000000000000000000000{self.config.trade_contract[2:].lower()}"  # spender
        calldata += f"{max_gold_wei:064x}"  # amount
        calldata += "00000000000000000000000000000000000000000000000000000000000000"  # padding
        
        # Second call: buyShares
        calldata += f"000000000000000000000000{self.config.trade_contract[2:].lower()}"  # target
        calldata += "0000000000000000000000000000000000000000000000000000000000000000"  # value = 0
        calldata += "0000000000000000000000000000000000000000000000000000000000000060"  # data offset
        calldata += "00000000000000000000000000000000000000000000000000000000000001e4"  # data length
        
        # buyShares function data
        calldata += "1e4ea624"  # buyShares selector
        calldata += "00000000000000000000000000000000000000000000000000000000000000e0"  # playerIds offset
        calldata += "0000000000000000000000000000000000000000000000000000000000000120"  # maxGoldAmounts offset
        calldata += f"{max_gold_wei:064x}"  # maxGoldToSpend
        calldata += f"{deadline:064x}"  # deadline
        calldata += f"000000000000000000000000{self.config.smart_wallet_address[2:].lower()}"  # recipient
        calldata += "0000000000000000000000000000000000000000000000000000000000000160"  # signature offset
        
        # playerIds array
        calldata += "0000000000000000000000000000000000000000000000000000000000000001"  # length = 1
        calldata += f"{player_id:064x}"  # player ID
        
        # maxGoldAmounts array
        calldata += "0000000000000000000000000000000000000000000000000000000000000001"  # length = 1
        calldata += f"{max_gold_wei:064x}"  # max gold amount
        
        # signature
        clean_sig = signature.replace("0x", "")
        calldata += "0000000000000000000000000000000000000000000000000000000000000041"  # signature length
        calldata += clean_sig  # signature data
        calldata += "00000000000000000000000000000000000000000000000000000000000000"  # padding
        
        print(f"‚úÖ CallData: {len(calldata)} —Å–∏–º–≤–æ–ª–æ–≤")
        return calldata

    def create_minimal_user_operation(self, calldata: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ UserOperation"""
        print("üîß –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UserOperation...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_op = {
            "callData": calldata,
            "callGasLimit": "0x39bb8",  # –ò–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            "initCode": "0x",
            "maxFeePerGas": "0x50535a6",  # –ò–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            "maxPriorityFeePerGas": "0x1ab3f0",  # –ò–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            "nonce": "0x1",  # –ü—Ä–æ—Å—Ç–æ–π nonce
            "paymasterAndData": "0x",  # –ë–µ–∑ paymaster –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            "preVerificationGas": "0xdd0a",  # –ò–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            "sender": self.config.smart_wallet_address,
            "signature": "0x",  # –ü—É—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–∞—á–∞–ª–∞
            "verificationGasLimit": "0x141e9"  # –ò–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        }
        
        print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UserOperation —Å–æ–∑–¥–∞–Ω")
        return user_op

    def send_minimal_operation(self, user_op: Dict) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ UserOperation"""
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UserOperation...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "eth_sendUserOperation",
            "params": [user_op, self.config.entry_point_address]
        }
        
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   Nonce: {user_op['nonce']}")
        print(f"   CallGasLimit: {user_op['callGasLimit']}")
        print(f"   MaxFeePerGas: {user_op['maxFeePerGas']}")
        print(f"   PaymasterAndData: {user_op['paymasterAndData']}")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Alchemy RPC
            response = self.session.post(
                self.config.alchemy_rpc_url,
                headers=self.rpc_headers,
                json=payload
            )
            
            result = response.json()
            print(f"üì• –û—Ç–≤–µ—Ç Alchemy: {result}")
            
            if "result" in result:
                print(f"‚úÖ –£—Å–ø–µ—Ö —á–µ—Ä–µ–∑ Alchemy: {result['result']}")
                return result["result"]
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ Alchemy, –ø—Ä–æ–±—É–µ–º Coinbase
            print("üîÑ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Coinbase...")
            
            response = self.session.post(
                self.config.coinbase_paymaster_url,
                headers=self.rpc_headers,
                json=payload
            )
            
            result = response.json()
            print(f"üì• –û—Ç–≤–µ—Ç Coinbase: {result}")
            
            if "result" in result:
                print(f"‚úÖ –£—Å–ø–µ—Ö —á–µ—Ä–µ–∑ Coinbase: {result['result']}")
                return result["result"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return None

    def buy_player_minimal(self, player_id: int, shares: int = 1) -> Dict:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        print(f"\nüöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        try:
            # 1. –ö–æ—Ç–∏—Ä–æ–≤–∫–∞
            print("\n1Ô∏è‚É£ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞...")
            quote_data = self.get_quote(player_id, shares)
            max_gold_wei = int(quote_data["totalMaxGoldToSpendWei"])
            
            # 2. –ü–æ–¥–ø–∏—Å—å
            print("\n2Ô∏è‚É£ –ü–æ–¥–ø–∏—Å—å...")
            signature_data = self.get_signature(quote_data["uuid"])
            
            # 3. CallData
            print("\n3Ô∏è‚É£ CallData...")
            calldata = self.build_simple_calldata(
                player_id, 
                max_gold_wei, 
                signature_data["signature"],
                signature_data["nonce"],
                signature_data["deadline"]
            )
            
            # 4. UserOperation
            print("\n4Ô∏è‚É£ UserOperation...")
            user_op = self.create_minimal_user_operation(calldata)
            
            # 5. –û—Ç–ø—Ä–∞–≤–∫–∞
            print("\n5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞...")
            result = self.send_minimal_operation(user_op)
            
            if result:
                return {
                    "success": True,
                    "player_id": player_id,
                    "operation_hash": result
                }
            else:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}

def main():
    print("üöÄ Football.fun Minimal Trader v4.2")
    print("="*50)
    
    bearer_token = input("–í–≤–µ–¥–∏—Ç–µ Bearer —Ç–æ–∫–µ–Ω: ").strip()
    
    if not bearer_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")
        return
    
    trader = MinimalFootballTrader(bearer_token)
    
    player_id = 570810
    shares = 1
    
    result = trader.buy_player_minimal(player_id, shares)
    
    if result["success"]:
        print(f"\n‚úÖ –£—Å–ø–µ—Ö! –ò–≥—Ä–æ–∫ {player_id} –∫—É–ø–ª–µ–Ω!")
        print(f"   Hash: {result['operation_hash']}")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {result['error']}")

if __name__ == "__main__":
    main()