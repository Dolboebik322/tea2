// CVE-2024-3566 (BatBadBut) - Демонстрационные примеры для Node.js
// ВНИМАНИЕ: Этот код предназначен только для образовательных целей!

const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('=== CVE-2024-3566 (BatBadBut) Демонстрация ===\n');

// Пример 1: Уязвимое использование spawn()
function vulnerableSpawn(userInput) {
    console.log('1. УЯЗВИМЫЙ КОД - spawn() без .exe:');
    console.log(`   Выполнение: spawn('npm', ['install', '${userInput}'])`);
    
    const child = spawn('npm', ['install', userInput], { stdio: 'inherit' });
    
    child.on('error', (err) => {
        console.log(`   Ошибка: ${err.message}`);
    });
    
    child.on('close', (code) => {
        console.log(`   Процесс завершен с кодом: ${code}\n`);
    });
}

// Пример 2: Безопасное использование с .exe
function safeSpawn(userInput) {
    console.log('2. БЕЗОПАСНЫЙ КОД - явное указание .exe:');
    console.log(`   Выполнение: spawn('npm.exe', ['install', '${userInput}'])`);
    
    const child = spawn('npm.exe', ['install', userInput], { stdio: 'inherit' });
    
    child.on('error', (err) => {
        console.log(`   Ошибка: ${err.message}`);
    });
    
    child.on('close', (code) => {
        console.log(`   Процесс завершен с кодом: ${code}\n`);
    });
}

// Пример 3: Создание вредоносного batch-файла для демонстрации
function createMaliciousBat() {
    const batContent = `@echo off
echo [DEMO] Выполняется вредоносный npm.bat
echo [DEMO] Аргументы: %*
echo [DEMO] ВНИМАНИЕ: Это демонстрация уязвимости!

REM В реальной атаке здесь был бы вредоносный код
echo [DEMO] Здесь мог бы выполниться произвольный код...

REM Попытка выполнить настоящий npm (если он есть)
where npm.exe >nul 2>&1
if %errorlevel% == 0 (
    echo [DEMO] Перенаправление на настоящий npm.exe
    npm.exe %*
) else (
    echo [DEMO] npm.exe не найден
)
`;

    const batPath = path.join(__dirname, 'npm.bat');
    fs.writeFileSync(batPath, batContent);
    console.log(`3. Создан демонстрационный файл: ${batPath}`);
    console.log('   Этот файл показывает, как может работать атака\n');
    
    return batPath;
}

// Пример 4: Функция экранирования аргументов
function escapeShellArg(arg) {
    // Простое экранирование для Windows cmd
    return '"' + arg.replace(/"/g, '""') + '"';
}

function safeSpawnWithEscaping(userInput) {
    console.log('4. БЕЗОПАСНЫЙ КОД - с экранированием:');
    const escapedInput = escapeShellArg(userInput);
    console.log(`   Исходный ввод: ${userInput}`);
    console.log(`   Экранированный: ${escapedInput}`);
    console.log(`   Выполнение: spawn('npm.exe', ['install', ${escapedInput}])`);
    
    const child = spawn('npm.exe', ['install', escapedInput], { stdio: 'inherit' });
    
    child.on('error', (err) => {
        console.log(`   Ошибка: ${err.message}`);
    });
    
    child.on('close', (code) => {
        console.log(`   Процесс завершен с кодом: ${code}\n`);
    });
}

// Пример 5: Валидация входных данных
function validateInput(input) {
    console.log('5. ВАЛИДАЦИЯ ВХОДНЫХ ДАННЫХ:');
    console.log(`   Проверка ввода: "${input}"`);
    
    // Проверка на подозрительные символы
    const dangerousChars = /[&|;`$(){}[\]<>]/;
    if (dangerousChars.test(input)) {
        console.log('   ❌ ОПАСНЫЙ ВВОД ОБНАРУЖЕН!');
        console.log('   Найдены подозрительные символы, выполнение заблокировано\n');
        return false;
    }
    
    // Проверка на допустимые символы для имен пакетов
    const validPackageName = /^[@a-zA-Z0-9\-_.\/]+$/;
    if (!validPackageName.test(input)) {
        console.log('   ❌ НЕДОПУСТИМОЕ ИМЯ ПАКЕТА!');
        console.log('   Ввод не соответствует формату имени пакета\n');
        return false;
    }
    
    console.log('   ✅ Ввод прошел валидацию\n');
    return true;
}

// Главная функция демонстрации
function runDemo() {
    console.log('Начинаем демонстрацию CVE-2024-3566...\n');
    
    // Примеры входных данных
    const normalInput = 'express';
    const maliciousInput = 'package" && echo "INJECTED COMMAND" && echo "';
    
    console.log('=== ДЕМОНСТРАЦИЯ С ОБЫЧНЫМ ВВОДОМ ===');
    console.log(`Тестируемый ввод: "${normalInput}"\n`);
    
    // Создаем демонстрационный bat-файл
    const batPath = createMaliciousBat();
    
    // Добавляем текущую директорию в PATH для демонстрации
    process.env.PATH = __dirname + path.delimiter + process.env.PATH;
    
    console.log('=== ТЕСТИРОВАНИЕ С НОРМАЛЬНЫМ ВВОДОМ ===\n');
    
    // Тест валидации
    validateInput(normalInput);
    
    // Безопасные методы
    safeSpawn(normalInput);
    safeSpawnWithEscaping(normalInput);
    
    console.log('\n=== ДЕМОНСТРАЦИЯ С ВРЕДОНОСНЫМ ВВОДОМ ===');
    console.log(`Тестируемый ввод: "${maliciousInput}"\n`);
    
    // Тест валидации с вредоносным вводом
    const isValid = validateInput(maliciousInput);
    
    if (!isValid) {
        console.log('Валидация заблокировала выполнение вредоносного ввода.\n');
    }
    
    console.log('=== ОЧИСТКА ===');
    // Удаляем демонстрационный файл
    try {
        fs.unlinkSync(batPath);
        console.log('Демонстрационный npm.bat удален\n');
    } catch (err) {
        console.log(`Ошибка при удалении файла: ${err.message}\n`);
    }
    
    console.log('=== РЕКОМЕНДАЦИИ ПО ЗАЩИТЕ ===');
    console.log('1. Всегда используйте .exe расширение для исполняемых файлов');
    console.log('2. Валидируйте и экранируйте пользовательский ввод');
    console.log('3. Используйте абсолютные пути к исполняемым файлам');
    console.log('4. Применяйте принцип минимальных привилегий');
    console.log('5. Регулярно обновляйте среды выполнения\n');
    
    console.log('Демонстрация завершена.');
}

// Экспорт функций для использования в других модулях
module.exports = {
    vulnerableSpawn,
    safeSpawn,
    safeSpawnWithEscaping,
    validateInput,
    escapeShellArg,
    runDemo
};

// Запуск демонстрации, если файл выполняется напрямую
if (require.main === module) {
    runDemo();
}