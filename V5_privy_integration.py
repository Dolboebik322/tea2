#!/usr/bin/env python3
"""
Football.fun Player Trader v5.0 - Privy Integration
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Privy API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π
"""

import requests
import json
import time
import hashlib
from dataclasses import dataclass
from typing import Dict, Optional

@dataclass
class PrivyConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Privy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    api_base_url: str = "https://api.pro.football.fun"
    alchemy_rpc_url: str = "https://base-mainnet.g.alchemy.com/v2/CCDNKip23OyFJ7ssex2-O"
    coinbase_paymaster_url: str = "https://api.developer.coinbase.com/rpc/v1/base/Zvs2anqQIBcBNSP8ftgv2Ce0mQMyEtyI"
    privy_rpc_url: str = "https://auth.privy.io/api/v1/wallets/{wallet_id}/rpc"
    entry_point_address: str = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    smart_wallet_address: str = "0x8f37a8015851976aB75E309100c2511abaBC68AD"
    usdc_address: str = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
    trade_contract: str = "0x9da1bb4e725acc0d96010b7ce2a7244cda446617"
    chain_id: str = "0x2105"

class PrivyFootballTrader:
    def __init__(self, bearer_token: str):
        self.config = PrivyConfig()
        self.bearer_token = bearer_token
        self.session = requests.Session()
        self.wallet_id = None  # –ë—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞
        
        self.api_headers = {
            "accept": "*/*",
            "authorization": f"Bearer {bearer_token}",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        self.rpc_headers = {
            "accept": "*/*",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }

    def extract_wallet_info(self) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞"""
        print("üì§ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ...")
        
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
            import base64
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏
            parts = self.bearer_token.split('.')
            if len(parts) != 3:
                raise ValueError("Invalid JWT token format")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–¥–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            payload = parts[1]
            # –î–æ–±–∞–≤–ª—è–µ–º padding –¥–ª—è base64
            payload += '=' * (4 - len(payload) % 4)
            
            decoded = base64.b64decode(payload)
            token_data = json.loads(decoded)
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {token_data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º wallet_id –∏–∑ subject –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            subject = token_data.get('sub', '')
            if 'privy:' in subject:
                # –§–æ—Ä–º–∞—Ç: did:privy:cmerg5kn102qal80bzx2dnlp1
                self.wallet_id = subject.split(':')[-1]
                print(f"‚úÖ Wallet ID: {self.wallet_id}")
            
            return token_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback wallet ID
            self.wallet_id = "cmerg5kn102qal80bzx2dnlp1"  # –ò–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
            return {}

    def get_quote(self, player_id: int, shares: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"""
        print(f"üì§ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        payload = {
            "transactionType": "BUY",
            "inputType": "SHARES",
            "oPlayerIds": [player_id],
            "inputValues": [shares],
            "slippageBps": 500
        }
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/quote",
            headers=self.api_headers,
            json=payload
        )
        response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ UUID={data['uuid']}, Gold={data['totalMaxGoldToSpend']}")
        return data

    def get_signature(self, quote_uuid: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç API"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç API...")
        
        payload = {"quoteId": quote_uuid}
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/signature/buy",
            headers=self.api_headers,
            json=payload
        )
        response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ API –ø–æ–¥–ø–∏—Å—å: nonce={data['nonce']}, deadline={data['deadline']}")
        return data

    def get_clean_nonce(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ nonce"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º nonce...")
        
        call_data = "0x35567e1a0000000000000000000000008f37a8015851976ab75e309100c2511ababc68ad00000000000000000000000000000000000000000000000000000198eba23566"
        
        payload = {
            "jsonrpc": "2.0",
            "id": 4,
            "method": "eth_call",
            "params": [
                {"data": call_data, "to": self.config.entry_point_address},
                "latest"
            ]
        }
        
        response = self.session.post(
            self.config.alchemy_rpc_url,
            headers=self.rpc_headers,
            json=payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "result" in result:
            full_nonce = result["result"]
            # –û—á–∏—â–∞–µ–º –æ—Ç –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π
            nonce_int = int(full_nonce, 16)
            clean_nonce = hex(nonce_int)
            print(f"‚úÖ Nonce: {full_nonce} ‚Üí {clean_nonce}")
            return clean_nonce
        
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback nonce")
        return "0x1"

    def build_calldata(self, player_id: int, max_gold_wei: int, signature: str, nonce: int, deadline: int) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callData"""
        print("üîß –°—Ç—Ä–æ–∏–º callData...")
        
        calldata = "0x34fcd5be"
        calldata += "0000000000000000000000000000000000000000000000000000000000000020"
        calldata += "0000000000000000000000000000000000000000000000000000000000000002"
        calldata += "0000000000000000000000000000000000000000000000000000000000000040"
        calldata += "0000000000000000000000000000000000000000000000000000000000000120"
        
        # Approve USDC
        calldata += f"000000000000000000000000{self.config.usdc_address[2:].lower()}"
        calldata += "0000000000000000000000000000000000000000000000000000000000000000"
        calldata += "0000000000000000000000000000000000000000000000000000000000000060"
        calldata += "0000000000000000000000000000000000000000000000000000000000000044"
        calldata += "095ea7b3"
        calldata += f"000000000000000000000000{self.config.trade_contract[2:].lower()}"
        calldata += f"{max_gold_wei:064x}"
        calldata += "00000000000000000000000000000000000000000000000000000000000000"
        
        # BuyShares
        calldata += f"000000000000000000000000{self.config.trade_contract[2:].lower()}"
        calldata += "0000000000000000000000000000000000000000000000000000000000000000"
        calldata += "0000000000000000000000000000000000000000000000000000000000000060"
        calldata += "00000000000000000000000000000000000000000000000000000000000001e4"
        
        # buyShares function call
        calldata += "1e4ea624"
        calldata += "00000000000000000000000000000000000000000000000000000000000000e0"
        calldata += "0000000000000000000000000000000000000000000000000000000000000120"
        calldata += f"{max_gold_wei:064x}"
        calldata += f"{deadline:064x}"
        calldata += f"000000000000000000000000{self.config.smart_wallet_address[2:].lower()}"
        calldata += "0000000000000000000000000000000000000000000000000000000000000160"
        
        # playerIds array
        calldata += "0000000000000000000000000000000000000000000000000000000000000001"
        calldata += f"{player_id:064x}"
        
        # maxGoldAmounts array
        calldata += "0000000000000000000000000000000000000000000000000000000000000001"
        calldata += f"{max_gold_wei:064x}"
        
        # signature
        clean_signature = signature.replace("0x", "")
        calldata += "0000000000000000000000000000000000000000000000000000000000000041"
        calldata += clean_signature
        calldata += "00000000000000000000000000000000000000000000000000000000000000"
        
        print(f"‚úÖ CallData: {len(calldata)} —Å–∏–º–≤–æ–ª–æ–≤")
        return calldata

    def calculate_user_operation_hash(self, user_op: Dict) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ UserOperation –¥–ª—è –ø–æ–¥–ø–∏—Å–∏"""
        print("üîß –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à UserOperation...")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ö–µ—à–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å ABI encoding
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        hash_data = ""
        hash_data += user_op["sender"][2:]  # –±–µ–∑ 0x
        hash_data += user_op["nonce"][2:].zfill(64)
        hash_data += user_op["callData"][2:]
        hash_data += user_op["callGasLimit"][2:].zfill(64)
        hash_data += user_op["maxFeePerGas"][2:].zfill(64)
        
        # –í—ã—á–∏—Å–ª—è–µ–º SHA256 (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        hash_bytes = hashlib.sha256(bytes.fromhex(hash_data)).hexdigest()
        
        print(f"‚úÖ UserOp hash: 0x{hash_bytes}")
        return f"0x{hash_bytes}"

    def sign_with_privy(self, message_hash: str) -> str:
        """–ü–æ–¥–ø–∏—Å—å —á–µ—Ä–µ–∑ Privy API"""
        print("üì§ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Privy...")
        
        if not self.wallet_id:
            print("‚ö†Ô∏è Wallet ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–¥–ø–∏—Å—å")
            return "0x" + "204f724eefb366d739519aa914da9131124927dafaa4a5aeb3d420fba40617a76baed7624821e71ef8b3221f2ccfb8d4e7659896bc4c14b03a21a10bc2999a051c"
        
        try:
            privy_url = self.config.privy_rpc_url.format(wallet_id=self.wallet_id)
            
            payload = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "secp256k1_sign",
                "params": [message_hash]
            }
            
            response = self.session.post(
                privy_url,
                headers=self.api_headers,
                json=payload
            )
            
            print(f"üì• Privy –æ—Ç–≤–µ—Ç: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            
            if response.status_code == 200:
                result = response.json()
                if "result" in result:
                    signature = result["result"]
                    print(f"‚úÖ Privy –ø–æ–¥–ø–∏—Å—å: {signature[:50]}...")
                    return signature
            
            print("‚ö†Ô∏è Privy –ø–æ–¥–ø–∏—Å—å –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Privy –ø–æ–¥–ø–∏—Å–∏: {e}")
        
        # Fallback –ø–æ–¥–ø–∏—Å—å
        return "0x" + "204f724eefb366d739519aa914da9131124927dafaa4a5aeb3d420fba40617a76baed7624821e71ef8b3221f2ccfb8d4e7659896bc4c14b03a21a10bc2999a051c"

    def format_aa_signature(self, raw_signature: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è AA –∫–æ—à–µ–ª—å–∫–∞"""
        print("üîß –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º AA –ø–æ–¥–ø–∏—Å—å...")
        
        clean_sig = raw_signature.replace("0x", "")
        
        # –§–æ—Ä–º–∞—Ç AA –ø–æ–¥–ø–∏—Å–∏
        aa_signature = "0x0000000000000000000000000000000000000000000000000000000000000020"
        aa_signature += "0000000000000000000000000000000000000000000000000000000000000000"
        aa_signature += "0000000000000000000000000000000000000000000000000000000000000040"
        aa_signature += "0000000000000000000000000000000000000000000000000000000000000041"
        aa_signature += clean_sig
        aa_signature += "00000000000000000000000000000000000000000000000000000000000000"
        
        print(f"‚úÖ AA –ø–æ–¥–ø–∏—Å—å: {len(aa_signature)} —Å–∏–º–≤–æ–ª–æ–≤")
        return aa_signature

    def get_paymaster_data(self, user_op: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ paymaster –¥–∞–Ω–Ω—ã—Ö"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º paymaster –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º stub –¥–∞–Ω–Ω—ã–µ
            payload = {
                "jsonrpc": "2.0",
                "id": 6,
                "method": "pm_getPaymasterStubData",
                "params": [
                    {
                        "callData": user_op["callData"],
                        "callGasLimit": user_op["callGasLimit"],
                        "initCode": user_op["initCode"],
                        "maxFeePerGas": user_op["maxFeePerGas"],
                        "maxPriorityFeePerGas": user_op["maxPriorityFeePerGas"],
                        "nonce": user_op["nonce"],
                        "sender": user_op["sender"],
                        "signature": user_op["signature"],
                        "verificationGasLimit": user_op["verificationGasLimit"],
                        "preVerificationGas": user_op["preVerificationGas"]
                    },
                    self.config.entry_point_address,
                    self.config.chain_id,
                    None
                ]
            }
            
            response = self.session.post(
                self.config.coinbase_paymaster_url,
                headers=self.rpc_headers,
                json=payload
            )
            
            result = response.json()
            print(f"üì• Paymaster –æ—Ç–≤–µ—Ç: {result}")
            
            if "result" in result:
                paymaster_data = result["result"]["paymasterAndData"]
                print(f"‚úÖ Paymaster –¥–∞–Ω–Ω—ã–µ: {paymaster_data[:50]}...")
                return paymaster_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ paymaster: {e}")
        
        # Fallback paymaster –¥–∞–Ω–Ω—ã–µ
        current_time = int(time.time())
        paymaster_data = f"0x2faeb0760d4230ef2ac21496bb4f0b47d634fd4c000{current_time:08x}000000000000a583b20c1248462d8ce02d9a0f258b1b0001"
        
        # –î–æ–±–∞–≤–ª—è–µ–º padding
        while len(paymaster_data) < 200:
            paymaster_data += "00"
        
        print(f"üîÑ Fallback paymaster: {paymaster_data[:50]}...")
        return paymaster_data

    def buy_player_with_privy(self, player_id: int, shares: int = 1) -> Dict:
        """–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ —Å Privy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
        print(f"\nüöÄ –ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ {player_id} —Å Privy...")
        
        try:
            # 0. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
            print("\n0Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω...")
            self.extract_wallet_info()
            
            # 1. –ö–æ—Ç–∏—Ä–æ–≤–∫–∞
            print("\n1Ô∏è‚É£ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞...")
            quote_data = self.get_quote(player_id, shares)
            max_gold_wei = int(quote_data["totalMaxGoldToSpendWei"])
            
            # 2. –ü–æ–¥–ø–∏—Å—å –æ—Ç API
            print("\n2Ô∏è‚É£ API –ø–æ–¥–ø–∏—Å—å...")
            signature_data = self.get_signature(quote_data["uuid"])
            
            # 3. Nonce
            print("\n3Ô∏è‚É£ Nonce...")
            blockchain_nonce = self.get_clean_nonce()
            
            # 4. CallData
            print("\n4Ô∏è‚É£ CallData...")
            calldata = self.build_calldata(
                player_id, 
                max_gold_wei, 
                signature_data["signature"],
                signature_data["nonce"],
                signature_data["deadline"]
            )
            
            # 5. –ë–∞–∑–æ–≤—ã–π UserOperation
            print("\n5Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π UserOperation...")
            user_op = {
                "callData": calldata,
                "callGasLimit": "0x39bb8",
                "initCode": "0x",
                "maxFeePerGas": "0x50535a6",
                "maxPriorityFeePerGas": "0x1ab3f0",
                "nonce": blockchain_nonce,
                "paymasterAndData": "0x",  # –í—Ä–µ–º–µ–Ω–Ω–æ
                "preVerificationGas": "0xdd0a",
                "sender": self.config.smart_wallet_address,
                "signature": "0x",  # –í—Ä–µ–º–µ–Ω–Ω–æ
                "verificationGasLimit": "0x141e9"
            }
            
            # 6. Paymaster –¥–∞–Ω–Ω—ã–µ
            print("\n6Ô∏è‚É£ Paymaster...")
            paymaster_data = self.get_paymaster_data(user_op)
            user_op["paymasterAndData"] = paymaster_data
            
            # 7. –•–µ—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            print("\n7Ô∏è‚É£ –•–µ—à UserOperation...")
            user_op_hash = self.calculate_user_operation_hash(user_op)
            
            # 8. –ü–æ–¥–ø–∏—Å—å —á–µ—Ä–µ–∑ Privy
            print("\n8Ô∏è‚É£ Privy –ø–æ–¥–ø–∏—Å—å...")
            raw_signature = self.sign_with_privy(user_op_hash)
            aa_signature = self.format_aa_signature(raw_signature)
            user_op["signature"] = aa_signature
            
            # 9. –û—Ç–ø—Ä–∞–≤–∫–∞
            print("\n9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞...")
            payload = {
                "jsonrpc": "2.0",
                "id": 9,
                "method": "eth_sendUserOperation",
                "params": [user_op, self.config.entry_point_address]
            }
            
            print(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–π UserOperation:")
            print(f"   Nonce: {user_op['nonce']}")
            print(f"   CallGasLimit: {user_op['callGasLimit']}")
            print(f"   PaymasterData: {user_op['paymasterAndData'][:50]}...")
            print(f"   Signature: {user_op['signature'][:50]}...")
            
            response = self.session.post(
                self.config.coinbase_paymaster_url,
                headers=self.rpc_headers,
                json=payload
            )
            
            result = response.json()
            print(f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            if "result" in result:
                return {
                    "success": True,
                    "player_id": player_id,
                    "user_op_hash": result["result"],
                    "method": "Privy integration"
                }
            else:
                return {
                    "success": False,
                    "error": result.get("error", "Unknown error"),
                    "details": result
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}

def main():
    print("üöÄ Football.fun Privy Trader v5.0")
    print("="*50)
    
    bearer_token = input("–í–≤–µ–¥–∏—Ç–µ Bearer —Ç–æ–∫–µ–Ω: ").strip()
    
    if not bearer_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")
        return
    
    trader = PrivyFootballTrader(bearer_token)
    
    player_id = 570810
    shares = 1
    
    result = trader.buy_player_with_privy(player_id, shares)
    
    if result["success"]:
        print(f"\n‚úÖ –£—Å–ø–µ—Ö! –ò–≥—Ä–æ–∫ {player_id} –∫—É–ø–ª–µ–Ω!")
        print(f"   UserOp Hash: {result['user_op_hash']}")
        print(f"   –ú–µ—Ç–æ–¥: {result['method']}")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        if "details" in result:
            print(f"   –î–µ—Ç–∞–ª–∏: {result['details']}")

if __name__ == "__main__":
    main()