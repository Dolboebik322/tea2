import requests
import json
import time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass

@dataclass
class TradeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    api_base_url: str = "https://api.pro.football.fun"
    alchemy_rpc_url: str = "https://base-mainnet.g.alchemy.com/v2/CCDNKip23OyFJ7ssex2-O"
    coinbase_paymaster_url: str = "https://api.developer.coinbase.com/rpc/v1/base/Zvs2anqQIBcBNSP8ftgv2Ce0mQMyEtyI"
    
    # Contract addresses
    smart_wallet_address: str = "0x8f37a8015851976aB75E309100c2511abaBC68AD"
    entry_point_address: str = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    trade_contract_address: str = "0xba5ed110efdba3d005bfc882d75358acbbb85842"

class FootballTrader:
    def __init__(self, bearer_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        self.config = TradeConfig()
        self.bearer_token = bearer_token
        self.session = requests.Session()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_headers = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "authorization": f"Bearer {bearer_token}",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        }
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è RPC –∑–∞–ø—Ä–æ—Å–æ–≤
        self.rpc_headers = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        }

    def get_quote(self, player_id: int, shares: int = 1, slippage_bps: int = 500) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä–æ–∫–∞"""
        print(f"üì§ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        payload = {
            "transactionType": "BUY",
            "inputType": "SHARES",
            "oPlayerIds": [player_id],
            "inputValues": [shares],
            "slippageBps": slippage_bps
        }
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/quote",
            headers=self.api_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {response.status_code}")
            response.raise_for_status()
        
        data = response.json()
        quote_uuid = data["data"]["uuid"]
        total_gold = data["data"]["totalMaxGoldToSpend"]
        
        print(f"‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: UUID={quote_uuid}, Gold={total_gold}")
        return data["data"]

    def get_trade_signature(self, quote_uuid: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
        
        payload = {"quoteId": quote_uuid}
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/signature/buy",
            headers=self.api_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {response.status_code}")
            response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞: nonce={data['nonce']}, deadline={data['deadline']}")
        return data

    def rpc_call(self, method: str, params: List, rpc_id: int = 1) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPC –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–ª–æ–∫—á–µ–π–Ω—É"""
        payload = {
            "jsonrpc": "2.0",
            "id": rpc_id,
            "method": method,
            "params": params
        }
        
        response = self.session.post(
            self.config.alchemy_rpc_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        if response.status_code != 200:
            response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            print(f"‚ùå RPC –æ—à–∏–±–∫–∞ {method}: {result['error']}")
            return result
        
        return result["result"]

    def build_exact_call_data(self, player_id: int, max_gold_wei: int, signature: str, nonce: int, deadline: int) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ callData –Ω–∞ –æ—Å–Ω–æ–≤–µ curl –∑–∞–ø—Ä–æ—Å–æ–≤
        
        –ê–Ω–∞–ª–∏–∑ callData –∏–∑ curl:
        0x34fcd5be - selector —Ñ—É–Ω–∫—Ü–∏–∏
        –ó–∞—Ç–µ–º –∏–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è batched –æ–ø–µ—Ä–∞—Ü–∏–π (approve + buyShares)
        """
        print("üîß –°—Ç—Ä–æ–∏–º —Ç–æ—á–Ω—ã–π callData –Ω–∞ –æ—Å–Ω–æ–≤–µ curl –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # –≠—Ç–æ —Ç–æ—á–Ω—ã–π callData –∏–∑ –≤–∞—à–∏—Ö curl –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: batched –æ–ø–µ—Ä–∞—Ü–∏—è (approve USDC + buyShares)
        
        # Selector –¥–ª—è executeBatch
        call_data = "0x34fcd5be"
        
        # Offset –¥–ª—è –º–∞—Å—Å–∏–≤–∞ targets
        call_data += "0000000000000000000000000000000000000000000000000000000000000020"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (2: approve + buyShares)
        call_data += "0000000000000000000000000000000000000000000000000000000000000002"
        
        # Offset –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ call
        call_data += "0000000000000000000000000000000000000000000000000000000000000040"
        
        # Offset –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ call  
        call_data += "0000000000000000000000000000000000000000000000000000000000000120"
        
        # –ü–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: approve USDC
        # Target: USDC contract
        call_data += "000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913"
        call_data += "0000000000000000000000000000000000000000000000000000000000000000"
        call_data += "0000000000000000000000000000000000000000000000000000000000000060"
        
        # Approve calldata length
        call_data += "0000000000000000000000000000000000000000000000000000000000000044"
        
        # approve(spender, amount) - selector: 0x095ea7b3
        call_data += "095ea7b3"
        # Spender: trade contract
        call_data += "0000000000000000000000009da1bb4e725acc0d96010b7ce2a7244cda446617"
        # Amount: max_gold_wei in hex, padded to 32 bytes
        call_data += f"{max_gold_wei:064x}"
        
        # Padding
        call_data += "00000000000000000000000000000000000000000000000000000000"
        
        # –í—Ç–æ—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: buyShares
        # Target: trade contract
        call_data += "0000000000000000000000009da1bb4e725acc0d96010b7ce2a7244cda446617"
        call_data += "0000000000000000000000000000000000000000000000000000000000000000"
        call_data += "0000000000000000000000000000000000000000000000000000000000000060"
        
        # buyShares calldata length
        call_data += "00000000000000000000000000000000000000000000000000000000000001e4"
        
        # buyShares(playerIds[], maxGoldAmounts[], nonce, deadline, user, signature) - selector: 0xea624851
        call_data += "ea624851"
        
        # Offset –¥–ª—è playerIds array
        call_data += "00000000000000000000000000000000000000000000000000000000000000e0"
        
        # Offset –¥–ª—è maxGoldAmounts array  
        call_data += "0000000000000000000000000000000000000000000000000000000000000120"
        
        # Nonce
        call_data += f"{nonce:064x}"
        
        # Deadline
        call_data += f"{deadline:064x}"
        
        # User address
        call_data += f"000000000000000000000000{self.config.smart_wallet_address[2:].lower()}"
        
        # Offset –¥–ª—è signature
        call_data += "0000000000000000000000000000000000000000000000000000000000000160"
        
        # PlayerIds array length
        call_data += "0000000000000000000000000000000000000000000000000000000000000001"
        
        # Player ID
        call_data += f"{player_id:064x}"
        
        # MaxGoldAmounts array length
        call_data += "0000000000000000000000000000000000000000000000000000000000000001"
        
        # Max gold amount
        call_data += f"{max_gold_wei:064x}"
        
        # Signature length
        signature_clean = signature[2:] if signature.startswith('0x') else signature
        signature_length = len(signature_clean) // 2
        call_data += f"{signature_length:064x}"
        
        # Signature data
        call_data += signature_clean
        
        # Padding
        padding_needed = (32 - (signature_length % 32)) % 32
        call_data += "00" * padding_needed
        
        print(f"‚úÖ CallData –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(call_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return call_data

    def get_nonce_from_blockchain(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ nonce –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ —á–µ—Ä–µ–∑ EntryPoint"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º nonce –∏–∑ EntryPoint...")
        
        # EntryPoint.getNonce(sender, key) –≥–¥–µ key = 0
        nonce_result = self.rpc_call("eth_call", [{
            "data": f"0x35567e1a000000000000000000000000{self.config.smart_wallet_address[2:].lower()}0000000000000000000000000000000000000000000000000000000000000000",
            "to": self.config.entry_point_address
        }, "latest"])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        if nonce_result and nonce_result != "0x":
            nonce_int = int(nonce_result, 16)
            formatted_nonce = hex(nonce_int) if nonce_int > 0 else "0x0"
        else:
            formatted_nonce = "0x0"
        
        print(f"‚úÖ Blockchain nonce: {nonce_result} -> {formatted_nonce}")
        return formatted_nonce

    def get_paymaster_stub_data(self, user_op: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ stub –¥–∞–Ω–Ω—ã—Ö –æ—Ç paymaster"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º paymaster stub –¥–∞–Ω–Ω—ã–µ...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 6,
            "method": "pm_getPaymasterStubData",
            "params": [
                user_op,
                self.config.entry_point_address,
                "0x2105",  # Chain ID –¥–ª—è Base –≤ hex
                None
            ]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ paymaster stub: {response.status_code}")
            return "0x"
        
        result = response.json()
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ paymaster stub: {result['error']}")
            return "0x"
        
        paymaster_data = result["result"]["paymasterAndData"]
        print(f"‚úÖ Paymaster stub –ø–æ–ª—É—á–µ–Ω: {paymaster_data[:50]}...")
        return paymaster_data

    def send_user_operation(self, user_op: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ UserOperation"""
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 9,
            "method": "eth_sendUserOperation",
            "params": [user_op, self.config.entry_point_address]
        }
        
        print(f"üìã Payload:")
        print(f"   Method: {payload['method']}")
        print(f"   UserOp keys: {list(user_op.keys())}")
        print(f"   Nonce: {user_op['nonce']}")
        print(f"   CallGasLimit: {user_op['callGasLimit']}")
        print(f"   PaymasterData: {user_op['paymasterAndData'][:50]}...")
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        print(f"üì• –û—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code != 200:
            error_text = response.text
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_text}")
            return {"error": error_text, "status_code": response.status_code}
        
        result = response.json()
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
            return {"error": "Send failed", "details": result}
        
        print(f"‚úÖ UserOperation –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result['result']}")
        return {"success": True, "userOpHash": result["result"]}

    def buy_player_exact(self, player_id: int, shares: int = 1) -> Dict:
        """
        –¢–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ curl –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        try:
            print(f"üîÑ –¢–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ {player_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ curl –¥–∞–Ω–Ω—ã—Ö...")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
            print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É...")
            quote_data = self.get_quote(player_id, shares)
            quote_uuid = quote_data["uuid"]
            max_gold_wei = int(quote_data["totalMaxGoldToSpendWei"])
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
            print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
            signature_data = self.get_trade_signature(quote_uuid)
            signature = signature_data["signature"]
            api_nonce = signature_data["nonce"]
            deadline = signature_data["deadline"]
            
            # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π nonce –∫–∞–∫ –≤ curl –∑–∞–ø—Ä–æ—Å–∞—Ö
            print("\n3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π nonce...")
            # –í —Ä–µ–∞–ª—å–Ω—ã—Ö curl –∑–∞–ø—Ä–æ—Å–∞—Ö nonce –±—ã–ª: 0x198eb498bc70000000000000000
            # –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Account Abstraction –∫–æ—à–µ–ª—å–∫–æ–≤
            blockchain_nonce = "0x0"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π nonce –¥–ª—è –Ω–∞—á–∞–ª–∞
            print(f"‚úÖ Nonce: {blockchain_nonce}")
            
            # 4. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑
            print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑...")
            gas_price = self.rpc_call("eth_gasPrice", [])
            priority_fee = self.rpc_call("eth_maxPriorityFeePerGas", [])
            
            base_fee = int(gas_price, 16)
            priority_fee_int = int(priority_fee, 16)
            max_fee = int(base_fee * 1.2)
            max_priority = int(priority_fee_int * 1.8)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            print(f"‚úÖ –ì–∞–∑: base={base_fee}, priority={priority_fee_int}")
            print(f"   Max fee: {max_fee} ({hex(max_fee)})")
            print(f"   Max priority: {max_priority} ({hex(max_priority)})")
            
            # 5. –°—Ç—Ä–æ–∏–º callData
            print("\n5Ô∏è‚É£ –°—Ç—Ä–æ–∏–º callData...")
            call_data = self.build_exact_call_data(
                player_id, max_gold_wei, signature, api_nonce, deadline
            )
            
            # 6. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UserOperation –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è paymaster –¥–∞–Ω–Ω—ã—Ö
            print("\n6Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UserOperation...")
            
            # Signature –∫–∞–∫ –≤ curl –∑–∞–ø—Ä–æ—Å–∞—Ö - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è paymaster –¥–∞–Ω–Ω—ã—Ö
            stub_signature = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c00000000000000000000000000000000000000000000000000000000000000"
            
            base_user_op = {
                "sender": self.config.smart_wallet_address,
                "nonce": blockchain_nonce,
                "initCode": "0x",
                "callData": call_data,
                "callGasLimit": "0x0",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ paymaster'–æ–º
                "verificationGasLimit": "0x0",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ paymaster'–æ–º
                "preVerificationGas": "0x0",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ paymaster'–æ–º
                "maxFeePerGas": hex(max_fee),
                "maxPriorityFeePerGas": hex(max_priority),
                "signature": stub_signature
            }
            
            # 7. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ paymaster –¥–∞–Ω–Ω—ã–µ –∏–∑ curl
            print("\n7Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ paymaster –¥–∞–Ω–Ω—ã–µ...")
            # –ò–∑ curl –∑–∞–ø—Ä–æ—Å–æ–≤
            paymaster_address = "2faeb0760d4230ef2ac21496bb4f0b47d634fd4c"
            deadline_hex = hex(deadline)[2:].zfill(8)
            
            # –¢–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ curl –æ—Ç–≤–µ—Ç–∞ pm_getPaymasterStubData
            paymaster_data = f"0x{paymaster_address}000{deadline_hex}000000000000a583b20c1248462d8ce02d9a0f258b1b010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006978011259b7582d190d2a939c27656a3e5cb985dc573867ba21a18fa410da495a506e904db886172d336c4140acb7f430a9873af0b9ef00b33361dfea90356362411b"
            
            print(f"‚úÖ Paymaster –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {paymaster_data[:50]}...")
            
            # 8. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π UserOperation —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ curl
            print("\n8Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π UserOperation...")
            
            # –†–µ–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∏–∑ curl –∑–∞–ø—Ä–æ—Å–æ–≤
            real_signature = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041e16e7eb2993dc27c115a730cd3adaec7f856889bdcc27afaee492201fbe46cd2588a999ec07a75a1222832a123a46eeec37c33903ee53f529fa1496ae836a3201b00000000000000000000000000000000000000000000000000000000000000"
            
            final_user_op = {
                "sender": self.config.smart_wallet_address,
                "nonce": blockchain_nonce,
                "initCode": "0x",
                "callData": call_data,
                "callGasLimit": "0x39bb8",  # –ò–∑ curl
                "verificationGasLimit": "0x141e9",  # –ò–∑ curl
                "preVerificationGas": "0xdbbf",  # –ò–∑ curl
                "maxFeePerGas": hex(max_fee),
                "maxPriorityFeePerGas": hex(max_priority),
                "paymasterAndData": paymaster_data,
                "signature": real_signature
            }
            
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π UserOperation:")
            print(f"   Nonce: {final_user_op['nonce']}")
            print(f"   CallGasLimit: {final_user_op['callGasLimit']}")
            print(f"   VerificationGasLimit: {final_user_op['verificationGasLimit']}")
            print(f"   PreVerificationGas: {final_user_op['preVerificationGas']}")
            
            # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation
            print("\n9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation...")
            result = self.send_user_operation(final_user_op)
            
            if "error" in result:
                return {"success": False, "error": result}
            
            print(f"\n‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            print(f"   Player ID: {player_id}")
            print(f"   UserOp Hash: {result['userOpHash']}")
            
            return {
                "success": True,
                "player_id": player_id,
                "shares": shares,
                "quote_uuid": quote_uuid,
                "user_op_hash": result["userOpHash"],
                "max_gold_spent": max_gold_wei
            }
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            return {"success": False, "error": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Football.fun Player Trader v2.2 (Exact)")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bearer —Ç–æ–∫–µ–Ω: ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader = FootballTrader(token)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
    player_id = 246333  # ID –∏–≥—Ä–æ–∫–∞
    shares = 1          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        result = trader.buy_player_exact(player_id, shares)
        
        if result["success"]:
            print(f"\nüéâ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   UserOp Hash: {result['user_op_hash']}")
        else:
            print(f"\n‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {result['error']}")
            
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()