// üöÄ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
// ‚ö†Ô∏è –¢–û–õ–¨–ö–û –¥–ª—è —Å–∞–π—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!

console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
function quickXSSTest() {
    console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ XSS...');
    
    const testPayloads = [
        '<script>console.log("XSS-FOUND")</script>',
        '"><img src=x onerror=console.log("XSS")>',
        "';alert('XSS');//"
    ];
    
    const inputs = document.querySelectorAll('input[type="text"], textarea');
    let foundVulns = 0;
    
    inputs.forEach((input, index) => {
        const originalValue = input.value;
        
        testPayloads.forEach(payload => {
            input.value = payload;
            input.dispatchEvent(new Event('input', { bubbles: true }));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
            if (document.body.innerHTML.includes(payload)) {
                console.warn(`‚ö†Ô∏è  XSS –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª–µ ${index + 1}: ${input.name || input.id}`);
                foundVulns++;
            }
        });
        
        input.value = originalValue;
    });
    
    if (foundVulns === 0) {
        console.log('‚úÖ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
    }
    
    return foundVulns;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function quickHeaderCheck() {
    console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...');
    
    const criticalHeaders = ['Content-Security-Policy', 'X-Frame-Options'];
    
    fetch(location.href, { method: 'HEAD' })
        .then(response => {
            criticalHeaders.forEach(header => {
                if (response.headers.get(header)) {
                    console.log(`‚úÖ ${header}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                } else {
                    console.warn(`‚ùå ${header}: –û–¢–°–£–¢–°–¢–í–£–ï–¢!`);
                }
            });
        })
        .catch(() => console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏'));
}

// –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–æ—Ä–º
function findRiskyForms() {
    console.log('üìã –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–æ—Ä–º...');
    
    const forms = document.querySelectorAll('form');
    let riskyForms = 0;
    
    forms.forEach((form, index) => {
        const method = form.method.toLowerCase();
        const hasFileUpload = form.querySelector('input[type="file"]');
        const hasTextFields = form.querySelectorAll('input[type="text"], textarea').length;
        
        console.log(`–§–æ—Ä–º–∞ ${index + 1}:`);
        console.log(`  –ú–µ—Ç–æ–¥: ${method}`);
        console.log(`  –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π: ${hasTextFields}`);
        console.log(`  –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: ${hasFileUpload ? '–î–∞' : '–ù–µ—Ç'}`);
        
        if (method === 'get' && hasTextFields > 0) {
            console.warn('  ‚ö†Ô∏è  GET —Ñ–æ—Ä–º–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫');
            riskyForms++;
        }
        
        if (hasFileUpload) {
            console.warn('  ‚ö†Ô∏è  –§–æ—Ä–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
            riskyForms++;
        }
    });
    
    return riskyForms;
}

// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cookies
function quickCookieCheck() {
    console.log('üç™ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cookies...');
    
    if (!document.cookie) {
        console.log('‚ÑπÔ∏è  Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const cookies = document.cookie.split(';');
    let insecureCookies = 0;
    
    cookies.forEach(cookie => {
        const cookieName = cookie.trim().split('=')[0];
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º Set-Cookie)
        if (!cookie.includes('Secure') && location.protocol === 'https:') {
            console.warn(`‚ö†Ô∏è  Cookie "${cookieName}" –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ Secure —Ñ–ª–∞–≥–∞`);
            insecureCookies++;
        }
    });
    
    if (insecureCookies === 0) {
        console.log('‚úÖ –Ø–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å cookies –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    return insecureCookies;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CVE-2024-3566 —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
function checkBatBadBut() {
    console.log('ü¶á –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ BatBadBut (CVE-2024-3566) –ø–∞—Ç—Ç–µ—Ä–Ω—ã...');
    
    const inputs = document.querySelectorAll('input[type="text"], textarea');
    const testPayloads = [
        'test" && echo "vulnerable" && echo "',
        'package" | whoami | echo "',
        'file.exe" & echo "test" & echo "'
    ];
    
    let foundIssues = 0;
    
    inputs.forEach((input, index) => {
        const originalValue = input.value;
        
        testPayloads.forEach(payload => {
            input.value = payload;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ payload'–∞
            setTimeout(() => {
                if (document.body.innerHTML.includes('vulnerable') || 
                    document.body.innerHTML.includes('whoami') ||
                    document.body.innerHTML.includes(payload)) {
                    console.warn(`‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å BatBadBut –≤ –ø–æ–ª–µ ${index + 1}`);
                    foundIssues++;
                }
            }, 100);
        });
        
        input.value = originalValue;
    });
    
    setTimeout(() => {
        if (foundIssues === 0) {
            console.log('‚úÖ BatBadBut —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
        }
    }, 500);
    
    return foundIssues;
}

// –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
function quickFullScan() {
    console.log('üöÄ –ë–´–°–¢–†–û–ï –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï');
    console.log('==============================');
    
    const results = {
        xss: quickXSSTest(),
        forms: findRiskyForms(),
        cookies: quickCookieCheck(),
        batbad: checkBatBadBut()
    };
    
    quickHeaderCheck();
    
    setTimeout(() => {
        console.log('\nüìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢:');
        console.log(`XSS –ø—Ä–æ–±–ª–µ–º: ${results.xss}`);
        console.log(`–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º: ${results.forms}`);
        console.log(`–ü—Ä–æ–±–ª–µ–º —Å cookies: ${results.cookies}`);
        console.log(`BatBadBut –ø—Ä–æ–±–ª–µ–º: ${results.batbad}`);
        
        const total = results.xss + results.forms + results.cookies + results.batbad;
        
        if (total === 0) {
            console.log('‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –±—ã—Å—Ç—Ä–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏');
        } else {
            console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${total} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º`);
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
        }
    }, 1000);
    
    return results;
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥—É
function generateReport() {
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
    
    const siteUrl = window.location.href;
    const timestamp = new Date().toISOString();
    
    const report = `
üõ°Ô∏è –û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ê–ô–¢–ê
============================
URL: ${siteUrl}
–î–∞—Ç–∞: ${timestamp}
–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫: –î—Ä—É–∂–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:
${quickFullScan()}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies
5. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ Content Security Policy

‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ –±–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 
–ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    `;
    
    console.log(report);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (navigator.clipboard) {
        navigator.clipboard.writeText(report).then(() => {
            console.log('üìã –û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        });
    }
    
    return report;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.QuickSecurity = {
    quickXSSTest,
    quickHeaderCheck,
    findRiskyForms,
    quickCookieCheck,
    checkBatBadBut,
    quickFullScan,
    generateReport
};

console.log('\nüìã –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´:');
console.log('QuickSecurity.quickFullScan()    - –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
console.log('QuickSecurity.quickXSSTest()     - –¢–æ–ª—å–∫–æ XSS —Ç–µ—Å—Ç');
console.log('QuickSecurity.quickHeaderCheck() - –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
console.log('QuickSecurity.checkBatBadBut()   - –¢–æ–ª—å–∫–æ CVE-2024-3566');
console.log('QuickSecurity.generateReport()   - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –¥—Ä—É–≥–∞');

console.log('\nüöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: QuickSecurity.quickFullScan()');
console.log('üìù –î–ª—è –æ—Ç—á–µ—Ç–∞: QuickSecurity.generateReport()');