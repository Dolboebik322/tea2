#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ data –ø–æ–ª—è –∏–∑ eth_call
"""

def quick_decode(data: str):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ calldata"""
    if not data.startswith("0x"):
        data = "0x" + data
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ calldata: {data[:50]}...")
    print(f"   –û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(data)} —Å–∏–º–≤–æ–ª–æ–≤ ({(len(data)-2)//2} –±–∞–π—Ç)")
    
    if len(data) < 10:
        print("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # Function selector (–ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞)
    selector = data[:10]
    params = data[10:]
    
    print(f"   Function selector: {selector}")
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    selectors = {
        "0x250b1b41": "unknown_function_1",
        "0x35567e1a": "getNonce(address,uint192)",
        "0x34fcd5be": "executeBatch(bytes32,bytes)", 
        "0x095ea7b3": "approve(address,uint256)",
        "0x1e4ea624": "buyShares(...)"
    }
    
    if selector in selectors:
        print(f"   Function: {selectors[selector]}")
    else:
        print(f"   Function: UNKNOWN")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ 32-–±–∞–π—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
    if params:
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ({len(params)} —Å–∏–º–≤–æ–ª–æ–≤):")
        
        for i in range(0, len(params), 64):
            block = params[i:i+64]
            if len(block) == 64:
                block_num = i // 64
                uint_val = int(block, 16)
                
                print(f"     –ë–ª–æ–∫ {block_num}: {block}")
                print(f"       –ö–∞–∫ uint: {uint_val}")
                
                # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª–µ–π)
                if block.startswith("000000000000000000000000"):
                    address = "0x" + block[-40:]
                    print(f"       –ö–∞–∫ address: {address}")
                
                # –ï—Å–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                if uint_val < 10**10:
                    print(f"       –ö–∞–∫ timestamp: {uint_val}")
                
                print()

# –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –≤–∞—à–∏—Ö curl –∑–∞–ø—Ä–æ—Å–æ–≤
examples = [
    "0x250b1b4100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d5e5D9099be10ADEf065E45b6444CA4a94fB6367",
    "0x35567e1a0000000000000000000000008f37a8015851976ab75e309100c2511ababc68ad00000000000000000000000000000000000000000000000000000198eba23566"
]

if __name__ == "__main__":
    print("üöÄ Quick ABI Decoder")
    print("="*50)
    
    for i, example in enumerate(examples, 1):
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä {i}:")
        quick_decode(example)
        print("-" * 50)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–≤–≤–µ–¥–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    while True:
        data = input("\n–í–≤–µ–¥–∏—Ç–µ calldata: ").strip()
        if data.lower() in ['q', 'quit', 'exit']:
            break
        if data:
            quick_decode(data)
            print("-" * 30)