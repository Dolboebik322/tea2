import requests
import json
import time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass

@dataclass
class TradeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    api_base_url: str = "https://api.pro.football.fun"
    alchemy_rpc_url: str = "https://base-mainnet.g.alchemy.com/v2/CCDNKip23OyFJ7ssex2-O"
    coinbase_paymaster_url: str = "https://api.developer.coinbase.com/rpc/v1/base/Zvs2anqQIBcBNSP8ftgv2Ce0mQMyEtyI"
    
    # Contract addresses
    smart_wallet_address: str = "0x8f37a8015851976aB75E309100c2511abaBC68AD"
    entry_point_address: str = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    trade_contract_address: str = "0xba5ed110efdba3d005bfc882d75358acbbb85842"

class FootballTrader:
    def __init__(self, bearer_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        
        Args:
            bearer_token: Bearer —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API
        """
        self.config = TradeConfig()
        self.bearer_token = bearer_token
        self.session = requests.Session()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_headers = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "authorization": f"Bearer {bearer_token}",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        }
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è RPC –∑–∞–ø—Ä–æ—Å–æ–≤
        self.rpc_headers = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "referer": "https://pro.football.fun/",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        }

    def get_quote(self, player_id: int, shares: int = 1, slippage_bps: int = 500) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä–æ–∫–∞
        
        Args:
            player_id: ID –∏–≥—Ä–æ–∫–∞
            shares: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
            slippage_bps: –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500 = 5%)
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        """
        print(f"üì§ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        payload = {
            "transactionType": "BUY",
            "inputType": "SHARES",
            "oPlayerIds": [player_id],
            "inputValues": [shares],
            "slippageBps": slippage_bps
        }
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/quote",
            headers=self.api_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            response.raise_for_status()
        
        data = response.json()
        quote_uuid = data["data"]["uuid"]
        total_gold = data["data"]["totalMaxGoldToSpend"]
        
        print(f"‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: UUID={quote_uuid}, Gold={total_gold}")
        return data["data"]

    def get_trade_signature(self, quote_uuid: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Args:
            quote_uuid: UUID –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ (signature, nonce, deadline)
        """
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
        
        payload = {"quoteId": quote_uuid}
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/signature/buy",
            headers=self.api_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞: nonce={data['nonce']}, deadline={data['deadline']}")
        return data

    def rpc_call(self, method: str, params: List, rpc_id: int = 1) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPC –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
        
        Args:
            method: –ú–µ—Ç–æ–¥ RPC
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            rpc_id: ID –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç RPC –∑–∞–ø—Ä–æ—Å–∞
        """
        payload = {
            "jsonrpc": "2.0",
            "id": rpc_id,
            "method": method,
            "params": params
        }
        
        response = self.session.post(
            self.config.alchemy_rpc_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå RPC –æ—à–∏–±–∫–∞ {method}: {response.status_code}")
            response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            print(f"‚ùå RPC –æ—à–∏–±–∫–∞ {method}: {result['error']}")
            return result
        
        return result["result"]

    def get_gas_prices(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –≥–∞–∑
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –≥–∞–∑
        """
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑...")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
        base_fee_result = self.rpc_call("eth_gasPrice", [])
        priority_fee_result = self.rpc_call("eth_maxPriorityFeePerGas", [])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π nonce —á–µ—Ä–µ–∑ EntryPoint
        nonce_result = self.rpc_call("eth_call", [{
            "data": "0x35567e1a0000000000000000000000008f37a8015851976ab75e309100c2511ababc68ad0000000000000000000000000000000000000000000000000000000000000000",
            "to": self.config.entry_point_address
        }, "latest"])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –≤ int
        base_fee = int(base_fee_result, 16)
        priority_fee = int(priority_fee_result, 16)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä 20% –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        max_fee = int(base_fee * 1.2)
        max_priority = int(priority_fee * 1.2)
        
        print(f"‚úÖ –ì–∞–∑ –ø–æ–ª—É—á–µ–Ω:")
        print(f"   Base fee: {base_fee} ({hex(base_fee)})")
        print(f"   Priority fee: {priority_fee} ({hex(priority_fee)})")
        print(f"   Max fee (—Å –±—É—Ñ–µ—Ä–æ–º): {max_fee} ({hex(max_fee)})")
        print(f"   Max priority (—Å –±—É—Ñ–µ—Ä–æ–º): {max_priority} ({hex(max_priority)})")
        print(f"   Nonce: {nonce_result}")
        
        return {
            "base_fee": base_fee,
            "priority_fee": priority_fee,
            "max_fee_per_gas": max_fee,
            "max_priority_fee_per_gas": max_priority,
            "blockchain_nonce": nonce_result
        }

    def build_call_data(self, player_id: int, max_gold_wei: int, signature: str, nonce: int, deadline: int) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callData –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        
        Args:
            player_id: ID –∏–≥—Ä–æ–∫–∞
            max_gold_wei: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤ wei
            signature: –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            nonce: Nonce –∏–∑ API
            deadline: Deadline —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Returns:
            Hex —Å—Ç—Ä–æ–∫–∞ callData
        """
        print("üîß –°—Ç—Ä–æ–∏–º callData —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        print(f"   Player ID: {player_id}")
        print(f"   Max Gold Wei: {max_gold_wei} ({hex(max_gold_wei)})")
        print(f"   API Nonce: {nonce}")
        print(f"   Deadline: {deadline} ({hex(deadline)})")
        print(f"   Signature: {signature[:20]}...")
        
        # –§—É–Ω–∫—Ü–∏—è buyShares(uint256[] calldata playerIds, uint256[] calldata maxGoldAmounts, uint256 nonce, uint256 deadline, bytes calldata signature)
        # Selector: 0x34fcd5be
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        call_data = "0x34fcd5be"
        
        # Offset –¥–ª—è –º–∞—Å—Å–∏–≤–∞ playerIds (0x00a0 = 160 bytes)
        call_data += "00000000000000000000000000000000000000000000000000000000000000a0"
        
        # Offset –¥–ª—è –º–∞—Å—Å–∏–≤–∞ maxGoldAmounts (0x00e0 = 224 bytes)
        call_data += "00000000000000000000000000000000000000000000000000000000000000e0"
        
        # Nonce (32 bytes)
        call_data += f"{nonce:064x}"
        
        # Deadline (32 bytes)
        call_data += f"{deadline:064x}"
        
        # Offset –¥–ª—è signature (0x0120 = 288 bytes)
        call_data += "0000000000000000000000000000000000000000000000000000000000000120"
        
        # –ú–∞—Å—Å–∏–≤ playerIds
        # –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ (1 —ç–ª–µ–º–µ–Ω—Ç)
        call_data += "0000000000000000000000000000000000000000000000000000000000000001"
        # Player ID
        call_data += f"{player_id:064x}"
        
        # –ú–∞—Å—Å–∏–≤ maxGoldAmounts
        # –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ (1 —ç–ª–µ–º–µ–Ω—Ç)
        call_data += "0000000000000000000000000000000000000000000000000000000000000001"
        # Max gold amount
        call_data += f"{max_gold_wei:064x}"
        
        # Signature
        signature_clean = signature[2:] if signature.startswith('0x') else signature
        signature_length = len(signature_clean) // 2
        
        # –î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏
        call_data += f"{signature_length:064x}"
        # –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
        call_data += signature_clean
        # Padding –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 32 –±–∞–π—Ç
        padding_needed = (32 - (signature_length % 32)) % 32
        call_data += "00" * padding_needed
        
        print(f"‚úÖ CallData –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(call_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return call_data

    def estimate_user_operation_gas(self, user_op: Dict) -> Dict:
        """
        –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è UserOperation
        
        Args:
            user_op: UserOperation
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞
        """
        print("üì§ –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑ –¥–ª—è UserOperation...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "eth_estimateUserOperationGas",
            "params": [user_op, self.config.entry_point_address]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return {}
        
        result = response.json()
        if "error" in result:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {result['error']}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                "preVerificationGas": "0x6b9f",  # 27551
                "verificationGasLimit": "0x1b7740",  # 1800000
                "callGasLimit": "0x39bb8"  # 236472
            }
        
        gas_estimates = result["result"]
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"   PreVerificationGas: {gas_estimates.get('preVerificationGas', '0x6b9f')}")
        print(f"   VerificationGasLimit: {gas_estimates.get('verificationGasLimit', '0x1b7740')}")
        print(f"   CallGasLimit: {gas_estimates.get('callGasLimit', '0x39bb8')}")
        
        return gas_estimates

    def get_paymaster_data(self, user_op: Dict) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö paymaster'–∞
        
        Args:
            user_op: UserOperation
        
        Returns:
            Paymaster data –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        """
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ paymaster...")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Coinbase paymaster
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "pm_getPaymasterStubData",
            "params": [user_op, self.config.entry_point_address, "8453", {}]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ paymaster: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return "0x"
        
        result = response.json()
        if "error" in result:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ paymaster: {result['error']}")
            return "0x"
        
        paymaster_data = result["result"]["paymasterAndData"]
        print(f"‚úÖ Paymaster –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {paymaster_data[:50]}...")
        return paymaster_data

    def get_paymaster_and_data(self, user_op: Dict) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö paymaster'–∞ –¥–ª—è —Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Args:
            user_op: UserOperation
        
        Returns:
            Paymaster and data –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        """
        print("üì§ –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ paymaster...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "pm_getPaymasterAndData",
            "params": [user_op, self.config.entry_point_address, "8453", {}]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ paymaster: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            print("üì§ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ sponsorUserOperation...")
            alt_payload = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "pm_sponsorUserOperation",
                "params": [user_op, self.config.entry_point_address]
            }
            
            alt_response = self.session.post(
                self.config.coinbase_paymaster_url,
                headers=self.rpc_headers,
                json=alt_payload
            )
            
            if alt_response.status_code == 200:
                alt_result = alt_response.json()
                if "result" in alt_result:
                    paymaster_data = alt_result["result"]["paymasterAndData"]
                    print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ paymaster –ø–æ–ª—É—á–µ–Ω—ã: {paymaster_data[:50]}...")
                    return paymaster_data
            
            return "0x"
        
        result = response.json()
        if "error" in result:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ paymaster: {result['error']}")
            return "0x"
        
        paymaster_data = result["result"]["paymasterAndData"]
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ paymaster –ø–æ–ª—É—á–µ–Ω—ã: {paymaster_data[:50]}...")
        return paymaster_data

    def send_user_operation(self, user_op: Dict) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ UserOperation
        
        Args:
            user_op: UserOperation –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation...")
        print(f"   Sender: {user_op['sender']}")
        print(f"   Nonce: {user_op['nonce']}")
        print(f"   CallData: {user_op['callData'][:50]}...")
        print(f"   CallGasLimit: {user_op['callGasLimit']}")
        print(f"   MaxFeePerGas: {user_op['maxFeePerGas']}")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "eth_sendUserOperation",
            "params": [user_op, self.config.entry_point_address]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        
        print(f"üì• –û—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code != 200:
            error_text = response.text
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_text}")
            return {"error": error_text, "status_code": response.status_code}
        
        result = response.json()
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {result['error']}")
            return {"error": "Send failed", "details": result}
        
        print(f"‚úÖ UserOperation –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result['result']}")
        return {"success": True, "userOpHash": result["result"]}

    def buy_player_complete(self, player_id: int, shares: int = 1) -> Dict:
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–∞–∑–∞
        
        Args:
            player_id: ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            shares: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏
        """
        try:
            print(f"üîÑ –ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ {player_id} —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–∞–∑–∞...")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
            print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É...")
            quote_data = self.get_quote(player_id, shares)
            quote_uuid = quote_data["uuid"]
            max_gold_wei = int(quote_data["totalMaxGoldToSpendWei"])
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
            print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
            signature_data = self.get_trade_signature(quote_uuid)
            signature = signature_data["signature"]
            api_nonce = signature_data["nonce"]
            deadline = signature_data["deadline"]
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑
            print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑...")
            gas_data = self.get_gas_prices()
            blockchain_nonce = gas_data["blockchain_nonce"]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º nonce –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if isinstance(blockchain_nonce, str) and blockchain_nonce.startswith('0x'):
                # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1
                formatted_nonce = hex(int(blockchain_nonce, 16))
            else:
                formatted_nonce = blockchain_nonce
            
            # 4. –°—Ç—Ä–æ–∏–º callData
            print("\n4Ô∏è‚É£ –°—Ç—Ä–æ–∏–º callData —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
            call_data = self.build_call_data(
                player_id, max_gold_wei, signature, api_nonce, deadline
            )
            
            # 5. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π UserOperation –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞
            print("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º UserOperation...")
            base_user_op = {
                "sender": self.config.smart_wallet_address,
                "nonce": formatted_nonce,
                "initCode": "0x",
                "callData": call_data,
                "callGasLimit": "0x39bb8",  # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                "verificationGasLimit": "0x1b7740",
                "preVerificationGas": "0x6b9f",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                "maxFeePerGas": hex(gas_data["max_fee_per_gas"]),
                "maxPriorityFeePerGas": hex(gas_data["max_priority_fee_per_gas"]),
                "paymasterAndData": "0x",
                "signature": "0x"
            }
            
            # 6. –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑
            print("\n6Ô∏è‚É£ –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑...")
            gas_estimates = self.estimate_user_operation_gas(base_user_op)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
            if gas_estimates:
                base_user_op["preVerificationGas"] = gas_estimates.get("preVerificationGas", "0x6b9f")
                base_user_op["verificationGasLimit"] = gas_estimates.get("verificationGasLimit", "0x1b7740")
                base_user_op["callGasLimit"] = gas_estimates.get("callGasLimit", "0x39bb8")
            
            # 7. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ paymaster –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            print("\n7Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ paymaster...")
            # –≠—Ç–æ –¥–∞–Ω–Ω—ã–µ paymaster –∏–∑ –≤–∞—à–∏—Ö curl –∑–∞–ø—Ä–æ—Å–æ–≤
            paymaster_address = "0x2faeb0760d4230ef2ac21496bb4f0b47d634fd4c"
            deadline_hex = hex(deadline)[2:].zfill(8)
            paymaster_data = f"{paymaster_address}000{deadline_hex}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            base_user_op["paymasterAndData"] = f"0x{paymaster_data}"
            print(f"‚úÖ Paymaster –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {paymaster_data[:50]}...")
            
            # 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation
            print("\n8Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation...")
            result = self.send_user_operation(base_user_op)
            
            if "error" in result:
                return {"success": False, "error": result}
            
            print(f"\n‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            print(f"   Player ID: {player_id}")
            print(f"   Shares: {shares}")
            print(f"   UserOp Hash: {result['userOpHash']}")
            
            return {
                "success": True,
                "player_id": player_id,
                "shares": shares,
                "quote_uuid": quote_uuid,
                "user_op_hash": result["userOpHash"],
                "max_gold_spent": max_gold_wei
            }
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return {"success": False, "error": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Football.fun Player Trader v2.0")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bearer —Ç–æ–∫–µ–Ω: ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader = FootballTrader(token)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏
    player_id = 246333  # ID –∏–≥—Ä–æ–∫–∞
    shares = 1          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        result = trader.buy_player_complete(player_id, shares)
        
        if result["success"]:
            print(f"\nüéâ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   UserOp Hash: {result['user_op_hash']}")
        else:
            print(f"\n‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {result['error']}")
            
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()