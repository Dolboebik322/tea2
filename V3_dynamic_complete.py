#!/usr/bin/env python3
"""
Football.fun Player Trader v3.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ API, –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
"""

import requests
import json
import time
import hashlib
from dataclasses import dataclass
from typing import Dict, Optional

@dataclass
class TradeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    api_base_url: str = "https://api.pro.football.fun"
    alchemy_rpc_url: str = "https://base-mainnet.g.alchemy.com/v2/CCDNKip23OyFJ7ssex2-O"
    coinbase_paymaster_url: str = "https://api.developer.coinbase.com/rpc/v1/base/Zvs2anqQIBcBNSP8ftgv2Ce0mQMyEtyI"
    privy_auth_url: str = "https://auth.privy.io/api/v1"
    entry_point_address: str = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    smart_wallet_address: str = "0x8f37a8015851976aB75E309100c2511abaBC68AD"
    usdc_address: str = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
    trade_contract: str = "0x9da1bb4e725acc0d96010b7ce2a7244cda446617"
    chain_id: str = "0x2105"  # Base mainnet

class FootballTrader:
    def __init__(self, bearer_token: str):
        self.config = TradeConfig()
        self.bearer_token = bearer_token
        self.session = requests.Session()
        self.privy_wallet_id = None
        self.privy_wallet_address = None
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_headers = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "authorization": f"Bearer {bearer_token}",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "priority": "u=1, i",
            "referer": "https://pro.football.fun/",
            "sec-ch-ua": '"Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-site",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        }
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è RPC –∑–∞–ø—Ä–æ—Å–æ–≤
        self.rpc_headers = {
            "accept": "*/*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "content-type": "application/json",
            "origin": "https://pro.football.fun",
            "priority": "u=1, i",
            "referer": "https://pro.football.fun/",
            "sec-ch-ua": '"Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        }

    def get_quote(self, player_id: int, shares: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"""
        print(f"üì§ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        payload = {
            "transactionType": "BUY",
            "inputType": "SHARES",
            "oPlayerIds": [player_id],
            "inputValues": [shares],
            "slippageBps": 500
        }
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/quote",
            headers=self.api_headers,
            json=payload
        )
        response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: UUID={data['uuid']}, Gold={data['totalMaxGoldToSpend']}")
        return data

    def get_signature(self, quote_uuid: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç API"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
        
        payload = {"quoteId": quote_uuid}
        
        response = self.session.post(
            f"{self.config.api_base_url}/v1/trade/signature/buy",
            headers=self.api_headers,
            json=payload
        )
        response.raise_for_status()
        
        data = response.json()["data"]
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—å: nonce={data['nonce']}, deadline={data['deadline']}")
        return data

    def get_dynamic_nonce(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ nonce –∏–∑ EntryPoint"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π nonce –∏–∑ EntryPoint...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ getNonce(sender, key=0)
        # Function selector: 0x35567e1a
        # sender (address): smart_wallet_address
        # key (uint192): 0x198eba23566 (–∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º)
        
        # –ë–µ—Ä–µ–º key –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ nonce
        key = "0x198eba23566"  # –≠—Ç–æ —á–∞—Å—Ç—å –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        
        call_data = "0x35567e1a"  # getNonce selector
        call_data += f"000000000000000000000000{self.config.smart_wallet_address[2:].lower()}"  # sender
        call_data += f"{key[2:].zfill(48)}"  # key (192 bits = 48 hex chars)
        
        payload = {
            "jsonrpc": "2.0",
            "id": 4,
            "method": "eth_call",
            "params": [
                {
                    "data": call_data,
                    "to": self.config.entry_point_address
                },
                "latest"
            ]
        }
        
        response = self.session.post(
            self.config.alchemy_rpc_url,
            headers=self.rpc_headers,
            json=payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            raise Exception(f"Error getting nonce: {result['error']}")
        
        # –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç nonce –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 0x{key}{nonce}
        full_nonce = result["result"]
        print(f"üìã –ü–æ–ª–Ω—ã–π nonce –∏–∑ EntryPoint: {full_nonce}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ nonce —á–∞—Å—Ç—å (—É–±–∏—Ä–∞–µ–º key)
        # –§–æ—Ä–º–∞—Ç: key (192 bits) + nonce (64 bits)
        # –ù–∞–º –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π nonce –¥–ª—è UserOperation
        formatted_nonce = full_nonce
        
        print(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π nonce: {formatted_nonce}")
        return formatted_nonce

    def get_current_gas_prices(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –≥–∞–∑"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
        priority_fee_payload = {
            "jsonrpc": "2.0",
            "id": 5,
            "method": "eth_maxPriorityFeePerGas"
        }
        
        response = self.session.post(
            self.config.alchemy_rpc_url,
            headers=self.rpc_headers,
            json=priority_fee_payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            raise Exception(f"Error getting gas prices: {result['error']}")
        
        priority_fee = int(result["result"], 16)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        max_fee = priority_fee * 50  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±—É—Ñ–µ—Ä
        max_priority = priority_fee * 2  # –£–¥–≤–∞–∏–≤–∞–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        
        gas_prices = {
            "max_fee_per_gas": hex(max_fee),
            "max_priority_fee_per_gas": hex(max_priority)
        }
        
        print(f"‚úÖ –¶–µ–Ω—ã –Ω–∞ –≥–∞–∑:")
        print(f"   Priority fee: {priority_fee} ({hex(priority_fee)})")
        print(f"   Max fee: {max_fee} ({hex(max_fee)})")
        print(f"   Max priority: {max_priority} ({hex(max_priority)})")
        
        return gas_prices

    def build_dynamic_calldata(self, player_id: int, max_gold_wei: int, signature: str, nonce: int, deadline: int) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ callData –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üîß –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π callData...")
        
        # Batched –æ–ø–µ—Ä–∞—Ü–∏—è: approve USDC + buyShares
        calldata = "0x34fcd5be"  # executeBatch selector
        calldata += "0000000000000000000000000000000000000000000000000000000000000020"  # offset
        calldata += "0000000000000000000000000000000000000000000000000000000000000002"  # count = 2
        calldata += "0000000000000000000000000000000000000000000000000000000000000040"  # offset 1
        calldata += "0000000000000000000000000000000000000000000000000000000000000120"  # offset 2
        
        # Approve USDC
        calldata += f"000000000000000000000000{self.config.usdc_address[2:].lower()}"  # USDC
        calldata += "0000000000000000000000000000000000000000000000000000000000000000"  # value = 0
        calldata += "0000000000000000000000000000000000000000000000000000000000000060"  # data offset
        calldata += "0000000000000000000000000000000000000000000000000000000000000044"  # data length
        calldata += "095ea7b3"  # approve selector
        calldata += f"000000000000000000000000{self.config.trade_contract[2:].lower()}"  # trade contract
        calldata += f"{max_gold_wei:064x}"  # amount
        calldata += "00000000000000000000000000000000000000000000000000000000000000"  # padding
        
        # BuyShares
        calldata += f"000000000000000000000000{self.config.trade_contract[2:].lower()}"  # trade contract
        calldata += "0000000000000000000000000000000000000000000000000000000000000000"  # value = 0
        calldata += "0000000000000000000000000000000000000000000000000000000000000060"  # data offset
        calldata += "00000000000000000000000000000000000000000000000000000000000001e4"  # data length
        
        # buyShares function call (selector: 0x1e4ea624)
        calldata += "1e4ea624"  # buyShares selector
        calldata += "00000000000000000000000000000000000000000000000000000000000000e0"  # playerIds offset
        calldata += "0000000000000000000000000000000000000000000000000000000000000120"  # maxGoldAmounts offset
        calldata += f"{max_gold_wei:064x}"  # maxGoldToSpend
        calldata += f"{deadline:064x}"  # deadline
        calldata += f"000000000000000000000000{self.config.smart_wallet_address[2:].lower()}"  # user
        calldata += "0000000000000000000000000000000000000000000000000000000000000160"  # signature offset
        
        # playerIds array
        calldata += "0000000000000000000000000000000000000000000000000000000000000001"  # length = 1
        calldata += f"{player_id:064x}"  # player_id
        
        # maxGoldAmounts array  
        calldata += "0000000000000000000000000000000000000000000000000000000000000001"  # length = 1
        calldata += f"{max_gold_wei:064x}"  # max_gold_wei
        
        # signature
        clean_signature = signature.replace("0x", "")
        calldata += "0000000000000000000000000000000000000000000000000000000000000041"  # signature length
        calldata += clean_signature  # signature data
        calldata += "00000000000000000000000000000000000000000000000000000000000000"  # padding
        
        print(f"‚úÖ CallData –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(calldata)} —Å–∏–º–≤–æ–ª–æ–≤")
        return calldata

    def get_paymaster_stub_data(self, calldata: str, nonce: str, gas_prices: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ stub –¥–∞–Ω–Ω—ã—Ö –æ—Ç paymaster"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º paymaster stub –¥–∞–Ω–Ω—ã–µ...")
        
        # –°–æ–∑–¥–∞–µ–º UserOperation —Å–æ stub –ø–æ–¥–ø–∏—Å—å—é
        user_op = {
            "callData": calldata,
            "initCode": "0x",
            "maxFeePerGas": gas_prices["max_fee_per_gas"],
            "maxPriorityFeePerGas": gas_prices["max_priority_fee_per_gas"],
            "nonce": nonce,
            "sender": self.config.smart_wallet_address,
            "signature": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c00000000000000000000000000000000000000000000000000000000000000",
            "callGasLimit": "0x0",
            "verificationGasLimit": "0x0",
            "preVerificationGas": "0x0"
        }
        
        payload = {
            "jsonrpc": "2.0",
            "id": 6,
            "method": "pm_getPaymasterStubData",
            "params": [user_op, self.config.entry_point_address, self.config.chain_id, None]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            raise Exception(f"Error getting paymaster stub data: {result['error']}")
        
        paymaster_data = result["result"]["paymasterAndData"]
        print(f"‚úÖ Paymaster stub –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {paymaster_data[:50]}...")
        return paymaster_data

    def estimate_gas(self, calldata: str, nonce: str, gas_prices: Dict, paymaster_data: str) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è UserOperation"""
        print("üì§ –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑...")
        
        user_op = {
            "callData": calldata,
            "callGasLimit": "0x0",
            "initCode": "0x",
            "maxFeePerGas": gas_prices["max_fee_per_gas"],
            "maxPriorityFeePerGas": gas_prices["max_priority_fee_per_gas"],
            "nonce": nonce,
            "paymasterAndData": paymaster_data,
            "preVerificationGas": "0x0",
            "sender": self.config.smart_wallet_address,
            "signature": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c00000000000000000000000000000000000000000000000000000000000000",
            "verificationGasLimit": "0x0"
        }
        
        payload = {
            "jsonrpc": "2.0",
            "id": 7,
            "method": "eth_estimateUserOperationGas",
            "params": [user_op, self.config.entry_point_address]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: {result['error']}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                "preVerificationGas": "0xdd0a",
                "callGasLimit": "0x39bb8", 
                "verificationGasLimit": "0x141e9"
            }
        
        gas_estimates = result["result"]
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞:")
        print(f"   preVerificationGas: {gas_estimates['preVerificationGas']}")
        print(f"   callGasLimit: {gas_estimates['callGasLimit']}")
        print(f"   verificationGasLimit: {gas_estimates['verificationGasLimit']}")
        
        return gas_estimates

    def get_final_paymaster_data(self, calldata: str, nonce: str, gas_prices: Dict, gas_estimates: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö paymaster –¥–∞–Ω–Ω—ã—Ö"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ paymaster –¥–∞–Ω–Ω—ã–µ...")
        
        user_op = {
            "callData": calldata,
            "callGasLimit": gas_estimates["callGasLimit"],
            "initCode": "0x",
            "maxFeePerGas": gas_prices["max_fee_per_gas"],
            "maxPriorityFeePerGas": gas_prices["max_priority_fee_per_gas"],
            "nonce": nonce,
            "paymasterAndData": "0x2faeb0760d4230ef2ac21496bb4f0b47d634fd4c",  # –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å paymaster
            "preVerificationGas": gas_estimates["preVerificationGas"],
            "sender": self.config.smart_wallet_address,
            "signature": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000041fffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c00000000000000000000000000000000000000000000000000000000000000",
            "verificationGasLimit": gas_estimates["verificationGasLimit"]
        }
        
        payload = {
            "jsonrpc": "2.0",
            "id": 8,
            "method": "pm_getPaymasterData",
            "params": [user_op, self.config.entry_point_address, self.config.chain_id, None]
        }
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            raise Exception(f"Error getting final paymaster data: {result['error']}")
        
        paymaster_data = result["result"]["paymasterAndData"]
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ paymaster –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {paymaster_data[:50]}...")
        return paymaster_data

    def calculate_userop_hash(self, user_op: Dict) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ UserOperation –¥–ª—è –ø–æ–¥–ø–∏—Å–∏"""
        print("üîß –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à UserOperation...")
        
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—è
        # —Å–æ–≥–ª–∞—Å–Ω–æ EIP-4337 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_op_str = json.dumps(user_op, sort_keys=True)
        hash_bytes = hashlib.sha256(user_op_str.encode()).digest()
        user_op_hash = "0x" + hash_bytes.hex()
        
        print(f"‚úÖ UserOperation hash: {user_op_hash}")
        return user_op_hash

    def get_privy_signature(self, user_op_hash: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç Privy –∫–æ—à–µ–ª—å–∫–∞"""
        print("üì§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç Privy...")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Privy API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        print("‚ö†Ô∏è Privy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏")
        print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return "0x204f724eefb366d739519aa914da9131124927dafaa4a5aeb3d420fba40617a76baed7624821e71ef8b3221f2ccfb8d4e7659896bc4c14b03a21a10bc2999a051c"

    def format_signature_for_aa(self, raw_signature: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Account Abstraction"""
        print("üîß –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è AA...")
        
        clean_signature = raw_signature.replace("0x", "")
        
        # –§–æ—Ä–º–∞—Ç AA –ø–æ–¥–ø–∏—Å–∏
        aa_signature = "0x0000000000000000000000000000000000000000000000000000000000000020"
        aa_signature += "0000000000000000000000000000000000000000000000000000000000000000"
        aa_signature += "0000000000000000000000000000000000000000000000000000000000000040"
        aa_signature += "0000000000000000000000000000000000000000000000000000000000000041"
        aa_signature += clean_signature
        aa_signature += "00000000000000000000000000000000000000000000000000000000000000"
        
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞: {len(aa_signature)} —Å–∏–º–≤–æ–ª–æ–≤")
        return aa_signature

    def send_user_operation(self, user_op: Dict) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ UserOperation"""
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": 9,
            "method": "eth_sendUserOperation",
            "params": [user_op, self.config.entry_point_address]
        }
        
        print(f"üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation:")
        print(f"   Nonce: {user_op['nonce']}")
        print(f"   CallGasLimit: {user_op['callGasLimit']}")
        print(f"   MaxFeePerGas: {user_op['maxFeePerGas']}")
        print(f"   MaxPriorityFeePerGas: {user_op['maxPriorityFeePerGas']}")
        
        response = self.session.post(
            self.config.coinbase_paymaster_url,
            headers=self.rpc_headers,
            json=payload
        )
        response.raise_for_status()
        
        result = response.json()
        if "error" in result:
            raise Exception(f"Error sending UserOperation: {result['error']}")
        
        user_op_hash = result["result"]
        print(f"‚úÖ UserOperation –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        print(f"   Hash: {user_op_hash}")
        return user_op_hash

    def wait_for_receipt(self, user_op_hash: str, timeout: int = 120) -> Optional[Dict]:
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
        print(f"   UserOp Hash: {user_op_hash}")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            payload = {
                "jsonrpc": "2.0",
                "id": 10,
                "method": "eth_getUserOperationReceipt",
                "params": [user_op_hash]
            }
            
            response = self.session.post(
                self.config.coinbase_paymaster_url,
                headers=self.rpc_headers,
                json=payload
            )
            
            if response.status_code == 200:
                result = response.json()
                if "result" in result and result["result"]:
                    receipt = result["result"]
                    tx_hash = receipt.get("receipt", {}).get("transactionHash")
                    
                    print(f"\nüéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                    print(f"   UserOp Hash: {user_op_hash}")
                    if tx_hash:
                        print(f"   Transaction Hash: {tx_hash}")
                        print(f"   Basescan: https://basescan.org/tx/{tx_hash}")
                    
                    return receipt
            
            print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º... ({int(time.time() - start_time)}s)")
            time.sleep(5)
        
        print(f"‚è∞ Timeout: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        return None

    def buy_player_dynamic(self, player_id: int, shares: int = 1) -> Dict:
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        print(f"\nüöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–≥—Ä–æ–∫–∞ {player_id}...")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
            print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É...")
            quote_data = self.get_quote(player_id, shares)
            max_gold_wei = int(quote_data["totalMaxGoldToSpendWei"])
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç API
            print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç API...")
            signature_data = self.get_signature(quote_data["uuid"])
            api_signature = signature_data["signature"]
            nonce = signature_data["nonce"]
            deadline = signature_data["deadline"]
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π nonce –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π nonce...")
            blockchain_nonce = self.get_dynamic_nonce()
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑
            print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑...")
            gas_prices = self.get_current_gas_prices()
            
            # 5. –°—Ç—Ä–æ–∏–º callData
            print("\n5Ô∏è‚É£ –°—Ç—Ä–æ–∏–º callData...")
            calldata = self.build_dynamic_calldata(player_id, max_gold_wei, api_signature, nonce, deadline)
            
            # 6. –ü–æ–ª—É—á–∞–µ–º paymaster stub –¥–∞–Ω–Ω—ã–µ
            print("\n6Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º paymaster stub –¥–∞–Ω–Ω—ã–µ...")
            stub_paymaster_data = self.get_paymaster_stub_data(calldata, blockchain_nonce, gas_prices)
            
            # 7. –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑
            print("\n7Ô∏è‚É£ –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑...")
            gas_estimates = self.estimate_gas(calldata, blockchain_nonce, gas_prices, stub_paymaster_data)
            
            # 8. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ paymaster –¥–∞–Ω–Ω—ã–µ
            print("\n8Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ paymaster –¥–∞–Ω–Ω—ã–µ...")
            final_paymaster_data = self.get_final_paymaster_data(calldata, blockchain_nonce, gas_prices, gas_estimates)
            
            # 9. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π UserOperation
            print("\n9Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π UserOperation...")
            user_op = {
                "callData": calldata,
                "callGasLimit": gas_estimates["callGasLimit"],
                "initCode": "0x",
                "maxFeePerGas": gas_prices["max_fee_per_gas"],
                "maxPriorityFeePerGas": gas_prices["max_priority_fee_per_gas"],
                "nonce": blockchain_nonce,
                "paymasterAndData": final_paymaster_data,
                "preVerificationGas": gas_estimates["preVerificationGas"],
                "sender": self.config.smart_wallet_address,
                "signature": "0x",  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–∞—è
                "verificationGasLimit": gas_estimates["verificationGasLimit"]
            }
            
            # 10. –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
            print("\nüîü –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å...")
            user_op_hash = self.calculate_userop_hash(user_op)
            raw_signature = self.get_privy_signature(user_op_hash)
            formatted_signature = self.format_signature_for_aa(raw_signature)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
            user_op["signature"] = formatted_signature
            
            # 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation
            print("\n1Ô∏è‚É£1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UserOperation...")
            final_user_op_hash = self.send_user_operation(user_op)
            
            # 12. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print("\n1Ô∏è‚É£2Ô∏è‚É£ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
            receipt = self.wait_for_receipt(final_user_op_hash)
            
            if receipt:
                print(f"\nüéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return {
                    "success": True,
                    "player_id": player_id,
                    "shares": shares,
                    "user_op_hash": final_user_op_hash,
                    "receipt": receipt
                }
            else:
                return {"success": False, "error": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å"}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}

def main():
    print("üöÄ Football.fun Dynamic Trader v3.0")
    print("="*50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bearer_token = input("–í–≤–µ–¥–∏—Ç–µ Bearer —Ç–æ–∫–µ–Ω: ").strip()
    
    if not bearer_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader = FootballTrader(bearer_token)
    
    # –ü–æ–∫—É–ø–∞–µ–º –∏–≥—Ä–æ–∫–∞
    player_id = 570810  # –ò–≥—Ä–æ–∫ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    shares = 1
    
    result = trader.buy_player_dynamic(player_id, shares)
    
    if result["success"]:
        print(f"\n‚úÖ –£—Å–ø–µ—Ö! –ò–≥—Ä–æ–∫ {player_id} –∫—É–ø–ª–µ–Ω!")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {result['error']}")

if __name__ == "__main__":
    main()