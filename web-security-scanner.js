// üõ°Ô∏è –≠—Ç–∏—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Ñ–æ—Ä–º
// ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –¢–û–õ–¨–ö–û –ù–ê –°–ê–ô–¢–ê–•, –ö–û–¢–û–†–´–ú–ò –í–´ –í–õ–ê–î–ï–ï–¢–ï –ò–õ–ò –ò–ú–ï–ï–¢–ï –ü–ò–°–¨–ú–ï–ù–ù–û–ï –†–ê–ó–†–ï–®–ï–ù–ò–ï!

console.log('üõ°Ô∏è –≠—Ç–∏—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Ñ–æ—Ä–º');
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∞–π—Ç–∞!');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkEthicalConsent() {
    const consent = confirm(
        '‚ö†Ô∏è –≠–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è\n\n' +
        '–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ ' +
        '–∏–ª–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞.\n\n' +
        '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–∏—Ö —Å–∞–π—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º.\n\n' +
        '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–∞–π—Ç?'
    );
    
    if (!consent) {
        console.log('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return false;
    }
    
    console.log('‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞–µ–º —ç—Ç–∏—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    return true;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ payload'—ã (–Ω–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ)
const testPayloads = {
    // XSS —Ç–µ—Å—Ç—ã (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
    xss: [
        '<script>console.log("XSS-Test")</script>',
        '"><script>console.log("XSS")</script>',
        "';console.log('XSS');//",
        '<img src=x onerror=console.log("XSS")>',
        'javascript:console.log("XSS")'
    ],
    
    // SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
    sql: [
        "' OR '1'='1",
        '" OR "1"="1',
        "'; SELECT 'test'--",
        "' UNION SELECT 'test'--",
        "admin'--"
    ],
    
    // Command injection (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)
    command: [
        '; echo "test"',
        '| echo "test"',
        '&& echo "test"',
        '`echo "test"`',
        '$(echo "test")'
    ],
    
    // Path traversal
    path: [
        '../../../etc/passwd',
        '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
        '....//....//....//etc/passwd',
        '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd'
    ],
    
    // CVE-2024-3566 —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    batbad: [
        'package" && echo "CVE-2024-3566-test" && echo "',
        'file.exe" & echo "batbad-test" & echo "',
        'command" | echo "injection-test" | echo "'
    ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function findForms() {
    const forms = document.querySelectorAll('form');
    const inputs = document.querySelectorAll('input[type="text"], input[type="search"], textarea');
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: ${forms.length}`);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π: ${inputs.length}`);
    
    return { forms: Array.from(forms), inputs: Array.from(inputs) };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã
function analyzeForm(form, index) {
    console.log(`\nüìã –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã ${index + 1}:`);
    console.log(`   –ú–µ—Ç–æ–¥: ${form.method || 'GET'}`);
    console.log(`   –î–µ–π—Å—Ç–≤–∏–µ: ${form.action || '—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'}`);
    
    const inputs = form.querySelectorAll('input, textarea, select');
    console.log(`   –ü–æ–ª–µ–π –≤–≤–æ–¥–∞: ${inputs.length}`);
    
    inputs.forEach((input, i) => {
        console.log(`   –ü–æ–ª–µ ${i + 1}: ${input.name || input.id || '–±–µ–∑ –∏–º–µ–Ω–∏'} (${input.type || input.tagName})`);
    });
    
    return Array.from(inputs);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
function testFieldSafely(field, payload, payloadType) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const originalValue = field.value;
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        field.value = payload;
        field.dispatchEvent(new Event('input', { bubbles: true }));
        field.dispatchEvent(new Event('change', { bubbles: true }));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Ä–∞–∑–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–¥–µ-—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const pageContent = document.body.innerHTML;
        const isReflected = pageContent.includes(payload);
        
        if (isReflected) {
            console.warn(`‚ö†Ô∏è  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å ${payloadType}: payload –æ—Ç—Ä–∞–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
            return { vulnerable: true, type: payloadType, payload: payload };
        }
        
        return { vulnerable: false, type: payloadType, payload: payload };
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        field.value = originalValue;
        field.dispatchEvent(new Event('input', { bubbles: true }));
        field.dispatchEvent(new Event('change', { bubbles: true }));
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function scanWebsite() {
    if (!checkEthicalConsent()) {
        return;
    }
    
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    const { forms, inputs } = findForms();
    const results = {
        totalForms: forms.length,
        totalInputs: inputs.length,
        vulnerabilities: []
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ä–º—É
    forms.forEach((form, formIndex) => {
        const formInputs = analyzeForm(form, formIndex);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º–µ
        formInputs.forEach((field, fieldIndex) => {
            if (field.type === 'password' || field.type === 'hidden') {
                console.log(`   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ ${fieldIndex + 1}: ${field.type}`);
                return;
            }
            
            console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ ${fieldIndex + 1}...`);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã payload'–æ–≤
            Object.entries(testPayloads).forEach(([payloadType, payloads]) => {
                payloads.slice(0, 2).forEach(payload => { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
                    const result = testFieldSafely(field, payload, payloadType);
                    if (result.vulnerable) {
                        results.vulnerabilities.push({
                            formIndex: formIndex,
                            fieldIndex: fieldIndex,
                            fieldName: field.name || field.id || 'unnamed',
                            ...result
                        });
                    }
                });
            });
        });
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(`   –í—Å–µ–≥–æ —Ñ–æ—Ä–º: ${results.totalForms}`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: ${results.totalInputs}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${results.vulnerabilities.length}`);
    
    if (results.vulnerabilities.length > 0) {
        console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:');
        results.vulnerabilities.forEach((vuln, index) => {
            console.log(`${index + 1}. –§–æ—Ä–º–∞ ${vuln.formIndex + 1}, –ø–æ–ª–µ "${vuln.fieldName}"`);
            console.log(`   –¢–∏–ø: ${vuln.type}`);
            console.log(`   Payload: ${vuln.payload}`);
        });
        
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('1. –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
        console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è SQL');
        console.log('3. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ Content Security Policy (CSP)');
        console.log('4. –≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤ HTML');
    } else {
        console.log('\n‚úÖ –Ø–≤–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö');
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function checkSecurityHeaders() {
    console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    
    const securityHeaders = [
        'Content-Security-Policy',
        'X-Frame-Options',
        'X-Content-Type-Options',
        'X-XSS-Protection',
        'Strict-Transport-Security',
        'Referrer-Policy'
    ];
    
    fetch(window.location.href, { method: 'HEAD' })
        .then(response => {
            console.log('\nüìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
            
            securityHeaders.forEach(header => {
                const value = response.headers.get(header);
                if (value) {
                    console.log(`‚úÖ ${header}: ${value}`);
                } else {
                    console.log(`‚ùå ${header}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                }
            });
        })
        .catch(error => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error.message);
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ cookies
function analyzeCookies() {
    console.log('\nüç™ –ê–Ω–∞–ª–∏–∑ cookies...');
    
    const cookies = document.cookie.split(';');
    
    if (cookies.length === 0 || (cookies.length === 1 && cookies[0] === '')) {
        console.log('‚ÑπÔ∏è  Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ cookies: ${cookies.length}`);
    
    cookies.forEach((cookie, index) => {
        const [name, value] = cookie.trim().split('=');
        console.log(`${index + 1}. ${name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if (cookie.includes('Secure')) {
            console.log('   ‚úÖ Secure —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('   ‚ö†Ô∏è  Secure —Ñ–ª–∞–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        if (cookie.includes('HttpOnly')) {
            console.log('   ‚úÖ HttpOnly —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('   ‚ö†Ô∏è  HttpOnly —Ñ–ª–∞–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function fullSecurityScan() {
    console.log('üõ°Ô∏è –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
    console.log('=====================================');
    
    const results = scanWebsite();
    checkSecurityHeaders();
    analyzeCookies();
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('==================');
    console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.');
    console.log('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å–∞–π—Ç–∞ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.');
    
    return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.SecurityScanner = {
    scanWebsite,
    checkSecurityHeaders,
    analyzeCookies,
    fullSecurityScan,
    findForms
};

console.log('\nüìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:');
console.log('SecurityScanner.scanWebsite()      - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—ã –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
console.log('SecurityScanner.checkSecurityHeaders() - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
console.log('SecurityScanner.analyzeCookies()   - –ê–Ω–∞–ª–∏–∑ cookies');
console.log('SecurityScanner.fullSecurityScan() - –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
console.log('SecurityScanner.findForms()        - –ù–∞–π—Ç–∏ —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');

console.log('\nüí° –ù–∞—á–Ω–∏—Ç–µ —Å: SecurityScanner.fullSecurityScan()');