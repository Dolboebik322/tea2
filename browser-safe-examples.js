// CVE-2024-3566 - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

console.log('üõ°Ô∏è CVE-2024-3566 (BatBadBut) - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞');
console.log('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ª—é–±—É—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∏–∂–µ:');

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validateUserInput(input) {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞: "${input}"`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const dangerousChars = /[&|;`$(){}[\]<>]/;
    const hasQuotes = /["']/;
    const hasShellOperators = /(\|\||&&|;|`)/;
    
    let issues = [];
    let safe = true;

    if (dangerousChars.test(input)) {
        const found = input.match(dangerousChars);
        issues.push(`‚ùå –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ${found.join(', ')}`);
        safe = false;
    }

    if (hasQuotes.test(input)) {
        issues.push('‚ö†Ô∏è  –ö–∞–≤—ã—á–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–∞ –∏–Ω—ä–µ–∫—Ü–∏—è');
        safe = false;
    }

    if (hasShellOperators.test(input)) {
        issues.push('üö® Shell –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!');
        safe = false;
    }

    if (safe) {
        console.log('‚úÖ –í–≤–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º');
    } else {
        console.log('üö´ –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:');
        issues.forEach(issue => console.log(`   ${issue}`));
    }
    
    return safe;
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function demonstrateEscaping(input) {
    console.log(`\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è: "${input}"`);
    
    // Windows CMD —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const windowsEscaped = '"' + input.replace(/"/g, '""') + '"';
    console.log(`Windows CMD: ${windowsEscaped}`);
    
    // Unix shell —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    const unixEscaped = "'" + input.replace(/'/g, "'\"'\"'") + "'";
    console.log(`Unix shell: ${unixEscaped}`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É
    console.log(`–ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏–Ω–∞: ${input.length}`);
    console.log(`–ü–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${windowsEscaped.length}`);
    
    return {
        original: input,
        windows: windowsEscaped,
        unix: unixEscaped
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ payload'–æ–≤
function analyzePayload(payload) {
    console.log(`\nüî¨ –ê–Ω–∞–ª–∏–∑ payload: "${payload}"`);
    
    const patterns = {
        'Command injection': /(\|\||&&|;)/,
        'Quote escaping': /["']/,
        'File operations': /(rm|del|copy|move)/i,
        'System commands': /(calc|cmd|bash|sh|whoami)/i,
        'Redirection': /[<>]/
    };
    
    let threats = [];
    
    Object.entries(patterns).forEach(([threat, pattern]) => {
        if (pattern.test(payload)) {
            const matches = payload.match(pattern);
            threats.push({
                type: threat,
                matches: matches
            });
        }
    });
    
    if (threats.length === 0) {
        console.log('‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
        console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã:');
        threats.forEach(threat => {
            console.log(`   ${threat.type}: ${threat.matches.join(', ')}`);
        });
    }
    
    return threats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫
function showSafePractices() {
    console.log('\nüõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ï –ü–†–ê–ö–¢–ò–ö–ò:');
    console.log('1. –í—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥');
    console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–ª—ã–µ —Å–ø–∏—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('3. –≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');
    console.log('4. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å shell=true');
    console.log('5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–∞–º');
    console.log('6. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .exe –Ω–∞ Windows');
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö payload'–æ–≤
function testCommonPayloads() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö payload\'–æ–≤:');
    
    const payloads = [
        'normal-package',
        'package" && calc.exe && echo "',
        'https://repo.git" && whoami && echo "',
        '--help; rm -rf /',
        'test`whoami`test',
        'file.txt > output.txt'
    ];
    
    payloads.forEach((payload, index) => {
        console.log(`\n--- –¢–µ—Å—Ç ${index + 1} ---`);
        const safe = validateUserInput(payload);
        if (!safe) {
            analyzePayload(payload);
        }
    });
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('\nüìã –ü–†–ò–ú–ï–†–´ –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:');
console.log('validateUserInput("normal-package")');
console.log('validateUserInput("package\\" && calc.exe && echo \\"")');
console.log('demonstrateEscaping("test\\"dangerous\\"input")');
console.log('analyzePayload("cmd && whoami")');
console.log('testCommonPayloads()');
console.log('showSafePractices()');

console.log('\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏!');

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.CVEDemo = {
        validateUserInput,
        demonstrateEscaping,
        analyzePayload,
        testCommonPayloads,
        showSafePractices
    };
    console.log('\nüåê –§—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ window.CVEDemo');
}